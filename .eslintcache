[{"/Users/dea/Code/Projects/olympics/src/index.js":"1","/Users/dea/Code/Projects/olympics/src/App.js":"2","/Users/dea/Code/Projects/olympics/src/Components/FemalePies/FemalePies.js":"3","/Users/dea/Code/Projects/olympics/src/Components/Paralympics/Paralympics.js":"4","/Users/dea/Code/Projects/olympics/src/Components/FirstTimeParticipate/FirstTimeParticipate.js":"5","/Users/dea/Code/Projects/olympics/src/Components/SustainabilityTimeline/SustainabilityTimeline.js":"6","/Users/dea/Code/Projects/olympics/src/Components/Footer/Footer.js":"7","/Users/dea/Code/Projects/olympics/src/Components/FrontPage/FrontPage.js":"8","/Users/dea/Code/Projects/olympics/src/Components/FemalePies/Pie.js":"9"},{"size":150,"mtime":1638112640412,"results":"10","hashOfConfig":"11"},{"size":699,"mtime":1638112640362,"results":"12","hashOfConfig":"11"},{"size":7742,"mtime":1638112640371,"results":"13","hashOfConfig":"11"},{"size":12355,"mtime":1638112640397,"results":"14","hashOfConfig":"11"},{"size":11594,"mtime":1638112640386,"results":"15","hashOfConfig":"11"},{"size":10225,"mtime":1638112640401,"results":"16","hashOfConfig":"11"},{"size":333,"mtime":1638112640390,"results":"17","hashOfConfig":"11"},{"size":1851,"mtime":1659691608161,"results":"18","hashOfConfig":"11"},{"size":4551,"mtime":1638112640374,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1orx1vr",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"22"},"/Users/dea/Code/Projects/olympics/src/index.js",[],["45","46"],"/Users/dea/Code/Projects/olympics/src/App.js",["47"],"import React, {useState} from \"react\";\nimport \"./App.css\";\nimport FemalePies from \"./Components/FemalePies/FemalePies\";\nimport SustainabilityTimeline from \"./Components/SustainabilityTimeline/SustainabilityTimeline\";\nimport FirstTimeParticipate from \"./Components/FirstTimeParticipate/FirstTimeParticipate\"\nimport Paralympics from \"./Components/Paralympics/Paralympics\";\nimport FrontPage from \"./Components/FrontPage/FrontPage\";\nimport Footer from \"./Components/Footer/Footer\"\n\nconst App = () => {\n  \n  return (\n    <>\n      <FrontPage />\n      <FirstTimeParticipate />\n      <Paralympics />\n      <SustainabilityTimeline />\n      <FemalePies />\n      <Footer /> \n    </>\n  )\n};\n\nexport default App;","/Users/dea/Code/Projects/olympics/src/Components/FemalePies/FemalePies.js",["48","49","50","51","52","53"],"import React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./FemalePies.css\";\nimport _ from \"lodash\";\nimport chroma from \"chroma-js\";\nimport rough from 'roughjs/bundled/rough.cjs';\nimport dataLoad from \"../../data/female_summer_olympics.csv\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBookOpen, faHome } from '@fortawesome/free-solid-svg-icons'\nimport Pie from \"./Pie\";\n\nconst GraphExplain = () => {\n  return (\n    <div className=\"graph-explain-container\">\n      <p>Data source: <a href=\"https://stillmed.olympic.org/media/Document%20Library/OlympicOrg/Factsheets-Reference-Documents/Women-in-the-Olympic-Movement/Factsheet-Women-in-the-Olympic-Movement.pdf\" target=\"_blank\">IOC</a></p>\n      <p className=\"disclaimer\">Female and male participation in the Summer Olympics; numbers are approximate.</p>\n      <p className=\"disclaimer\">Why do you think the female athlete participation in the Olympics used to be so low? What has changed? What do you think will happen in the future?</p>\n    </div>\n  )\n}\n\nconst FemalePies = () => {\n\n  /// refs ///\n  const svgRef = useRef();\n  const gRef = useRef();\n  const legendRef = useRef();\n\n  /// states ///\n  const [dataAll, setDataAll] = useState(null);\n  const [revealGraphExplanation, setRevealGraphExplanation] = useState(false);\n  const [show, setShow] = useState(false)\n\n  /// constatns ///\n  // dimensions \n  const height = 600 + 70;\n  const width = 1170;\n  const margin = {top: 20, right: 100, bottom: 0, left: 0}\n  // for the pies \n  const pieSize = 145; \n  const innerRadius = 23;\n  const outerRadius = pieSize/2 - 10;\n  const padAngle = 0.1;\n  const conerRadius = 15;\n  // colours \n  const colourFemale = chroma(\"#ff006e\").saturate(0)\n  const colourMale = chroma(\"#219ebc\").saturate(2)\n\n  /// Data load ///\n  useEffect(() => {\n    d3.csv(dataLoad, d3.autoType).then(d => {\n      setDataAll(d)\n    });\n  }, []);\n\n  /// D3 Code ///\n  useEffect(() => {\n    if (dataAll) {\n\n      // compute all the years \n      const years = dataAll.map(d => d.year)\n\n      /////////////////////////////////////////////\n      /////////// Rough JS Define /////////////////\n      /////////////////////////////////////////////\n      let rc = rough.svg(document.getElementById(\"svg-female-pies\"));\n\n\n      /////////////////////////\n      //// Legend on top /////\n      /////////////////////////\n      const legend = d3.select(legendRef.current)\n\n      // female\n      legend.each(function(d, i) {\n        d3.select(this).node()\n          .appendChild(\n            rc.circle(width - margin.right - 20, margin.top, 20, {\n              stroke: colourFemale,\n              strokeWidth: 1,\n              fillStyle: 'zigzag',\n              fill: colourFemale,\n              roughness: 1.7,\n          })\n        )\n      }) \n      legend.selectAll(\".legend-label-female\").data(['female']).join(\"text\")\n        .classed(\"legend-label-female\", true)\n        .text(d => d)\n        .attr(\"transform\", `translate(${width - margin.right}, ${margin.top})`)\n        .attr(\"dy\", \"0.35em\")\n        .style(\"fill\", colourFemale)\n\n      // male\n      legend.each(function(d, i) {\n        d3.select(this).node()\n          .appendChild(\n            rc.circle(width - margin.right - 100, margin.top, 20, {\n              stroke: colourMale,\n              strokeWidth: 1,\n              fillStyle: 'cross-hatch',\n              fill: colourMale,\n              roughness: 1.7,\n          })\n        )\n      }) \n      legend.selectAll(\".legend-label-male\").data(['male']).join(\"text\")\n        .classed(\"legend-label-male\", true)\n        .text(d => d)\n        .attr(\"transform\", `translate(${width - margin.right - 85}, ${margin.top})`)\n        .attr(\"dy\", \"0.35em\")\n        .style(\"fill\", colourMale)\n\n\n\n      /////////////////////////////////////////////\n      //////////////// Graph //////////////////////\n      /////////////////////////////////////////////\n      const svgD3 = d3.select(svgRef.current).attr(\"width\", width).attr(\"height\", height);\n      // 1. Pie\n      // this is what you use on the data\n      const pie = d3\n        .pie()\n        .sort(null)\n        .value((d) => d.percentage);\n\n      // 2. Arc\n      // this is what you use when drawing the graph\n      // it becomes the d attribute of paths\n      const arc = d3\n        .arc()\n        .innerRadius(innerRadius)\n        .outerRadius(outerRadius)\n        .padAngle(padAngle)\n        .cornerRadius(conerRadius);\n      // Graph area\n      const g = d3.select(gRef.current)\n        .attr(\"transform\", `translate(${0}, ${70})`)\n\n      // helper function to position on the grid\n      const perRow = 8; \n      const calculateGridPos = (i) => {\n        return [(i % perRow + 0.5) * pieSize, (Math.floor(i / perRow) + 0.5) * pieSize]\n      }\n\n      const groups = g.selectAll(\"g\")\n        .data(years.slice(0, 28))\n        .join(\"g\")\n          .attr(\"transform\", (d, i) => `translate(\n            ${calculateGridPos(i)[0]},\n            ${calculateGridPos(i)[1]}\n          )`)\n\n      // postion text with the year in the middle of each pie\n      const pieChartsText = groups\n        .append(\"text\")\n        .text(d => d)\n        .attr(\"class\", \"pie-text\")\n        .attr(\"dy\", \"0.35em\")\n        .attr(\"text-anchor\", \"middle\")\n        .style(\"fill\", colourFemale)\n\n      // draw the pie chart\n      const pieCharts = groups\n        .each(function(d, i) {\n\n          // filter just the data for the selected year\n          const dataForYear =  _.filter(dataAll, element => element.year == d)\n          const dataForYearTransformed = [\n            {gender: \"male\", percentage: 100 - dataForYear[0].proportion},\n            {gender: \"female\", percentage: dataForYear[0].proportion}\n          ]\n          \n          // rough pie chart \n          d3.select(this).node()\n          // draw part for the male \n            .appendChild(\n              rc.path(arc(pie(dataForYearTransformed)[0]), {\n                stroke: colourMale,\n                strokeWidth: 1,\n                fillStyle: 'cross-hatch',\n                fill: colourMale,\n                roughness: 2.5,\n          }))\n          // draw part for the female \n            .appendChild(\n              rc.path(arc(pie(dataForYearTransformed)[1]), {\n                stroke: colourFemale,\n                strokeWidth: 0.8,\n                fillStyle: 'zigzag',\n                fill: colourFemale,\n                roughness: 2.2,\n          }))\n        });\n\n    } \n  }, [dataAll, show]);\n\n  const toggleGraphExplanation = () => {\n    setRevealGraphExplanation(!revealGraphExplanation)\n  }\n\n  return (\n    <div className=\"page-container page-container-female-pies\" id=\"gender\">\n      <h2 className=\"graph-title graph-title-female-pies\">What is the athlete gender split at the Olympics?</h2>\n      <div className=\"mascot-female-pies\"></div>\n\n      <button className=\"icon home-icon\">\n        <a href=\"#home\" className=\"home-female-pies\"><FontAwesomeIcon icon={faHome}/></a>\n        <span className=\"info-span\"></span>\n      </button>  \n\n      <button \n        className=\"icon graph-explain-icon\" \n        onClick={toggleGraphExplanation}\n      >\n        <FontAwesomeIcon icon={faBookOpen}/>\n        <span className=\"info-span\"></span>\n      </button>  \n      {\n        revealGraphExplanation \n        ? <GraphExplain />\n        : null\n      } \n\n      {\n        !show ? <Pie show={show} setShow={setShow}/> : null\n      }\n      {\n        show ?\n          <div className=\"wrapper wrapper-female-pies\">\n            <svg id=\"svg-female-pies\" ref={svgRef} width={width} height={height}>\n              <g ref={legendRef}></g>\n              <g ref={gRef}></g>\n            </svg>\n          </div>\n        : null\n      }\n      \n    </div>\n  )\n};\n\nexport default FemalePies;","/Users/dea/Code/Projects/olympics/src/Components/Paralympics/Paralympics.js",["54","55","56","57","58","59","60","61","62","63"],"import React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./Paralympics.css\";\nimport _ from \"lodash\";\nimport chroma from \"chroma-js\";\nimport rough from 'roughjs/bundled/rough.cjs';\nimport dataLoad from \"../../data/paralympics.csv\";\nimport dataLoadSports from \"../../data/paralympics_sports.csv\"\nimport dataLoadLogos from \"../../data/sports_logos.csv\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBookOpen, faHome } from '@fortawesome/free-solid-svg-icons'\nimport { annotationCalloutElbow, annotationCalloutCurve, annotation } from \"d3-svg-annotation\";\n\n// Sources: \n// https://www.britannica.com/sports/Paralympic-Games (annotation)\n// https://en.wikipedia.org/wiki/Summer_Paralympic_Games all info for graphs, including logos\n\nconst GraphExplain = () => {\n  return (\n    <div className=\"graph-explain-container\">\n      <p>Data source: \n        <a href=\"https://en.wikipedia.org/wiki/Summer_Paralympic_Games\" target=\"_blank\"> Wikipedia </a> \n        and \n        <a href=\"https://www.britannica.com/sports/Paralympic-Games\" target=\"_blank\"> Britannica </a> \n      </p>\n      <p className=\"disclaimer\">Were you surprised to learn about the beginnings of the Paralympics; if so, what did you think before? Research the qualifying criteria for athletes over time. Is there a trend? If you could include other groups of people, what would these be?</p>\n    </div>\n  )\n}\n\nconst Paralympics = () => {\n\n  /// refs ///\n  const svgRef = useRef();\n  const xAxisRef = useRef();\n  const gAthletesRef = useRef();\n  const gSportsRef = useRef();\n  const tooltipParticipantsRef = useRef();\n  const tooltipSportsRef = useRef();\n  const annotationRef = useRef();\n\n  /// states ///\n  const [data, setData] = useState(null);\n  const [dataSports, setDataSports] = useState(null)\n  const [sports, setSports] = useState(null);\n  const [sportsLogos, setSportsLogos] = useState(null);\n  const [revealGraphExplanation, setRevealGraphExplanation] = useState(false);\n\n\n  /// constatns ///\n  // dimensions \n  const width = 1300;\n  const height = 600;\n  const margin = {top: 50, right: 20, bottom: 20, left: 40}\n  const sportsRadius = 10;\n  // colours \n  const barsColour = \"#219ebc\"\n  const axisColour = \"#219ebc\"\n  const sportsLowColour = \"#ff006e\"\n  const sportsHighColour = \"#f8961e\"\n\n\n  /// Data load ///\n  useEffect(() => {\n    d3.csv(dataLoad, d3.autoType).then(d => {\n      setData(d)\n    })\n    d3.csv(dataLoadSports, d3.autoType).then(d => {\n      setDataSports(d)\n      const allSports = _.uniq(d.map(el => el.sport))\n      setSports(allSports)\n    })\n    d3.csv(dataLoadLogos, d3.autoType).then(d => {\n      setSportsLogos(d)\n    })\n  }, []);\n\n  /// D3 Code ///\n  useEffect(() => {\n    if (data && dataSports && sports && sportsLogos) {    \n\n      /// Scales ///\n      // X Scale - year timeline \n      const xScale = d3.scaleBand()\n        .domain(data.map(d => d.year))\n        .range([margin.left, width - margin.right])\n        .padding(0.1)\n      // Y Scale num athletes \n      const yScaleAthletes = d3.scaleLinear()\n        .domain([margin.top, d3.max(data, d => d.competitors)])\n        .range([height/2, margin.top]) // to the middle of the graphing space \n      // Colour Scale for the sports \n      const colourScaleSports = chroma.scale([sportsLowColour, sportsHighColour]\n        .map(colour => chroma(colour).saturate(0)))\n        .colors(sports.length)\n\n      /// Axes ///\n      // X Axis - the years timeline \n      const xAxis = g => g\n        .attr(\"transform\", `translate(${0}, ${height/2 + margin.top})`)\n        .call(d3.axisBottom(xScale).tickFormat(i => i).tickSizeOuter(0))\n        .call(g => g.select(\".domain\")\n          .attr(\"color\", axisColour)\n          .attr(\"stroke-width\", 8)\n          .attr(\"stroke-linecap\", \"round\")\n        )\n        .call(g => g.selectAll(\".tick\").selectAll(\"line\").remove())\n        .call(g => g.selectAll(\"text\")\n          .attr(\"fill\", axisColour)\n          .attr(\"font-size\", \"18px\")\n          .attr(\"font-family\", 'Indie Flower, cursive')\n        )\n        \n      // call the axis \n      d3.select(xAxisRef.current).call(xAxis)\n\n\n      ////////////////////////////////////////////\n      /////////// Num Althetes Graph /////////////\n      ////////////////////////////////////////////\n      // Graphing area\n      const gAthletes = d3.select(gAthletesRef.current)\n        .attr(\"transform\", `translate(${0}, ${margin.top})`)\n\n      // one group for each bar\n      const athleteBarsGroups = gAthletes\n        .selectAll(\".athlete-bars-groups\")\n        .data(data)\n        .join(\"g\")\n        .classed(\"athlete-bars-groups\", true)\n\n      // just a normal bar chart - in front just for click events\n      const athletesGraph = athleteBarsGroups\n        .selectAll(\".athletes-bar\")\n        .data(d => [d])\n        .join(\"rect\")\n        .classed(\"athletes-bar\", true)\n          .attr(\"x\", d => xScale(d.year))\n          .attr(\"width\", xScale.bandwidth())\n          .attr(\"y\", d => yScaleAthletes(d.competitors)) \n          .attr(\"height\", d => yScaleAthletes(0) - yScaleAthletes(d.competitors))\n          .attr(\"fill\", barsColour)\n          .attr(\"fill-opacity\", 0.4)\n\n      // rough bar chart \n      let rcPara = rough.svg(document.getElementById(\"svg-paralympics\"));\n      const athletesGraphRough = athleteBarsGroups\n        .each(function(d, i) {\n          d3.select(this).node()\n            .appendChild(\n              rcPara.rectangle(\n                  xScale(d.year), \n                  yScaleAthletes(d.competitors), \n                  xScale.bandwidth(), \n                  yScaleAthletes(0) - yScaleAthletes(d.competitors), \n                {\n                stroke: barsColour,\n                strokeWidth: 1.3,\n                fillStyle: 'cross-hatch',\n                fill: barsColour,\n                roughness: 1.5,\n          })\n          )\n        })\n\n      ///////////////////\n      ///// Tooltip /////\n      ///////////////////\n      const tooltipParticipants = d3.select(tooltipParticipantsRef.current)\n      athleteBarsGroups\n        .on('mouseenter', (e, datum) => {\n          tooltipParticipants \n          .style('transform', d => `translate(\n              ${xScale(+datum.year) - xScale.bandwidth()/2}px,\n              ${yScaleAthletes(datum.competitors) - 40}px`\n            ) \n          .style(\"opacity\", 1)\n          .html(`\n            host: ${datum.host} \n            <br/> \n            nations: ${datum.nations} \n            <br/> \n            competitors: ${datum.competitors}\n          `)\n        })\n        .on('mouseleave', () => {\n          tooltipParticipants.style(\"opacity\", 0)\n        })\n\n    /////////////////////\n    //// Annotations ////\n    /////////////////////\n    const type = annotationCalloutCurve\n    const annotations = [{\n        note: {\n          label: \"The Paralympics developed after Sir Ludwig Guttmann organized a sports competition for British World War II veterans with spinal cord injuries in England in 1948.\",\n          title: \"Beginnings: 1948\"\n        },\n        dy: -160,\n        dx: 50,\n        x: 10,\n        y: 360,\n        color: barsColour,\n      }]\n    const makeAnnotations = annotation()\n      .editMode(false)\n      .notePadding(10)\n      .type(type)\n      .annotations(annotations)\n\n    const myAnnotation = d3.select(annotationRef.current)\n      .attr(\"class\", \"annotation-group\")\n      .attr(\"fill\", \"hotpink\")\n      .style(\"font-size\", '14px')\n      .style(\"opacity\", 1)\n      .call(makeAnnotations)\n        \n\n      ////////////////////////////////////////////\n      /////////// Num Sports Graph ///////////////\n      ////////////////////////////////////////////\n      // Graphing area\n      const gSports = d3.select(gSportsRef.current)\n        .attr(\"transform\", `translate(${0}, ${margin.top + height/2})`)\n\n      // draw one circle for each sport across all the years\n      const sportsG = gSports \n        .selectAll(\".sports-dot-g\")\n        .data(dataSports)\n        .join(\"g\")\n        .classed(\"sports-dot-g\", true)\n\n      const sportsDots = sportsG\n        .selectAll(\".sports-dot\")\n        .data(d => [d])\n        .join(\"circle\")\n        .classed(\"sports-dot\", true)\n          .attr(\"r\", sportsRadius)\n          .attr(\"fill\", d => colourScaleSports[_.indexOf(sports,d.sport)])\n          .attr(\"fill-opacity\", 0.85)\n          .attr(\"stroke\", d => colourScaleSports[_.indexOf(sports,d.sport)])\n          .attr(\"stroke-width\", 2)\n          .attr(\"stroke-opacity\", 1)\n          .attr(\"cx\", 0)\n          .attr(\"cy\", 0)\n\n      // place logo for that sport in the middle\n      const sportsLogo = sportsG  \n        .selectAll(\".sports-filling\")\n        .data(d => [d])\n        .join(\"svg:image\")\n        .classed(\"sports-filling\", true)\n          .attr(\"xlink:href\", d => _.find(sportsLogos, el => el.sport == d.sport).logo)\n          .attr(\"width\", sportsRadius + 2)\n          .attr(\"height\", sportsRadius + 2)\n          .attr(\"transform\", `translate(${-sportsRadius/2}, ${-sportsRadius/2})`)\n\n\n      // simulation \n      function tick() {\n        sportsG\n        .attr(\"transform\", d => `translate(${d.x}, ${d.y})`)\n      }\n      /// define the force ///\n      const simulation = d3.forceSimulation(dataSports)\n        .force('x', d3.forceX().strength(0.5).x(d => xScale(d.year) + xScale.bandwidth()/2))\n        .force('y', d3.forceY().strength(0.1).y((d, i) => (i%22)*2 + 100))\n        //.force('y', d3.forceY().strength(0.9).y((d, i) => (d.year%1960)*2 +(i%22) + 50))\n        .force(\"collide\", d3.forceCollide(sportsRadius + 1))\n\n      simulation.on(\"tick\", tick)\n      tick()\n\n      ///////////////////\n      ///// Tooltip /////\n      ///////////////////\n      const tooltipSports = d3.select(tooltipSportsRef.current)\n    \n      // Events when the sports circles are hovered, including tooltip\n      sportsG\n        .on('mouseenter', (e, datum) => {\n          // move the tooltip \n          tooltipSports \n          .style('transform', d => `translate(\n            ${xScale(+datum.year)}px,\n            ${height}px`\n          ) \n          .style(\"opacity\", 1)\n          .html(`${datum.sport}`)\n          // make the selected circle bigger \n          sportsDots\n            //.attr(\"r\", d => d == datum ? sportsRadius*2 : sportsRadius)\n            .attr(\"fill\", d => d == datum ? 'white' : colourScaleSports[_.indexOf(sports,d.sport)])\n            //.attr(\"stroke-width\", d => d == datum ? 0 : 2)\n          // make the logo bigger\n        })\n        .on('mouseleave', () => {\n          tooltipSports.style(\"opacity\", 0)\n          sportsDots\n            .attr(\"fill\", d => colourScaleSports[_.indexOf(sports,d.sport)])\n            .attr(\"stroke-width\", 2)\n        })\n\n\n    } \n  }, [data, dataSports, sports, sportsLogos]);\n\n  const toggleGraphExplanation = () => {\n    setRevealGraphExplanation(!revealGraphExplanation)\n  }\n\n  return (\n    <div className=\"page-container page-container-paralympics\" id=\"paralympics\">\n      <h2 className=\"graph-title graph-title-paralympics\">What is the history and timeline of the Paralympics?</h2>\n      <div className=\"mascot-paralympics\"></div>\n\n      <button className=\"icon home-icon\">\n        <a href=\"#home\" className=\"home-paralympics\"><FontAwesomeIcon icon={faHome}/></a>\n        <span className=\"info-span\"></span>\n      </button>  \n\n      <button \n        className=\"icon graph-explain-icon\" \n        onClick={toggleGraphExplanation}\n      >\n        <FontAwesomeIcon icon={faBookOpen} />\n        <span className=\"info-span\"></span>\n      </button>  \n      {\n        revealGraphExplanation \n        ? <GraphExplain />\n        : null\n      } \n\n      <div className=\"wrapper wrapper-paralympics\">\n        <svg id=\"svg-paralympics\" ref={svgRef} width={width} height={height+margin.bottom}>\n            <g ref={gAthletesRef} className=\"g-athletes\"></g>\n            <g ref={gSportsRef} className=\"g-sports\"></g>\n            <g ref={xAxisRef} className=\"g-axis\"></g>\n            <g ref={annotationRef}></g>\n        </svg>\n        <div className=\"tooltip-paralympics-participants\" ref={tooltipParticipantsRef}>Tooltip</div>\n        <div className=\"tooltip-paralympics-sports\" ref={tooltipSportsRef}></div>\n        <div className=\"paralympics-label-top\">participants</div>\n        <div className=\"paralympics-label-bottom\">sports</div>\n        <div className=\"mascot\"></div>\n      </div>\n\n    </div>\n  )\n};\n\nexport default Paralympics;","/Users/dea/Code/Projects/olympics/src/Components/FirstTimeParticipate/FirstTimeParticipate.js",["64","65","66","67","68","69","70","71","72","73","74","75","76"],"// Data from https://en.wikipedia.org/wiki/List_of_participating_nations_at_the_Summer_Olympic_Games\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./FirstTimeParticipate.css\";\nimport dataLoad from \"../../data/countries_first_year.json\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBookOpen, faHome } from '@fortawesome/free-solid-svg-icons'\nimport _ from \"lodash\"\nimport chroma from \"chroma-js\";\n\nconst GraphExplain = () => {\n  return (\n    <div className=\"graph-explain-container\">\n      <p>Data source: <a href=\"https://en.wikipedia.org/wiki/List_of_participating_nations_at_the_Summer_Olympic_Games\" target=\"_blank\">Wikipedia</a></p>\n      <p className=\"disclaimer\">Use the source to research further. Why did certain countries enter the Olympics later than others? Which countries or regions participated as part of other entities previously; did they welcome the chance to compete in the Olympics independently?</p>\n    </div>\n  )\n}\n\nconst FirstTimeParticipate = () => {\n\n  /// refs ///\n  const svgRef = useRef();\n  const gRef = useRef();\n  const xAxisRef = useRef();\n  const playButtonRef = useRef();\n  const tooltipRef = useRef();\n  const legendRef = useRef();\n  const legendAxisRef = useRef();\n\n  /// states ///\n  const [data, setData] = useState(null);\n  const [revealGraphExplanation, setRevealGraphExplanation] = useState(false);\n\n  /// constatns ///\n  // dimensions \n  const width = 2000;\n  const height = 480;\n  const margin = {top: 35, right: 60, bottom: 27, left: 40}\n\n\n  /// Data load ///\n  useEffect(() => {\n    setData(dataLoad)\n  }, []);\n\n  /// D3 Code ///\n  useEffect(() => {\n    if (data) {\n\n      const svg = d3.select(svgRef.current)\n\n      // find the range of years \n      const years = dataLoad.map(d => +d.first_year).sort((a, b) => a - b)\n\n      // special case: countries on multiple continents - Asia and Europe \n      const countriesMultipleContinents = ['Armenia','Azerbaijan','Cyprus','Georgia','Kazakhstan','Russia','Turkey']\n\n      /// Scales ///\n      const xScale = d3.scaleBand()\n        .domain(years)\n        .range([margin.left, width - margin.right])\n        .padding(0.1)\n\n      // Colour scale for the continents \n      const continents = _.uniq(data.map(d => d.continent))\n      //[\"Asia\", \"missing\", \"Europe\", \"Africa\", \"North America\", \"South America\", \"Oceania\"]\n      const continentsColours = {\n        \"Asia\": \"#ff006e\",\n        \"Europe\": \"#81568F\",\n        \"Africa\": \"#f8961e\",\n        \"North America\": \"#43aa8b\",\n        \"South America\": chroma(\"#219ebc\").saturate(0.5),\n        \"Oceania\": \"#90be6d\",\n        \"missing\": chroma(\"#22223b\").saturate(0.5)\n      }\n\n      // Colour gradient for the counties which are in Europe and Asia \n      const defs = svg.selectAll(\"defs\").data([0]).join(\"defs\")\n      const linearGradient = defs.append(\"linearGradient\")\n        .attr(\"id\", \"linear-gradient\")\n        .attr(\"x1\", 0)\n        .attr(\"y1\", 0)\n        .attr(\"x2\", \"100%\")\n        .attr(\"y2\", \"100%\");\n      //Set the color for the start (0%)\n      linearGradient.append(\"stop\") \n        .attr(\"offset\", \"0%\")\n        .attr(\"stop-color\", continentsColours['Asia']); \n      //Set the color for the end (100%)\n      linearGradient.append(\"stop\")\n        .attr(\"offset\", \"100%\")\n        .attr(\"stop-color\", continentsColours['Europe']); \n\n      // Set up the start //       \n      const startingXPosition = 250 + margin.left;\n      const startingYPosition = 150 + margin.top;\n      const gNodes = d3.select(gRef.current)\n        .attr(\"transform\", `translate(${startingXPosition}, ${startingYPosition})`)\n\n      /// Timeline axis ///\n      const xAxis = g => g\n        .attr(\"transform\", `translate(${0}, ${height - margin.bottom})`)\n        .call(d3.axisBottom(xScale).tickFormat(i => i).tickSizeOuter(0)) \n        .call(g => g.select(\".domain\")\n          .attr(\"color\", \"#219ebc\")\n          .attr(\"stroke-width\", 8)\n          .attr(\"stroke-linecap\", \"round\")\n        )\n        .call(g => g.selectAll(\".tick\").selectAll(\"line\").remove())\n        .call(g => g.selectAll(\"text\")\n          .attr(\"fill\", \"#219ebc\")\n          .attr(\"font-size\", \"18px\")\n          .attr(\"font-family\", 'Indie Flower, cursive'))\n\n      d3.select(xAxisRef.current).call(xAxis)\n\n\n      ////////////////////////\n      ////  Force Graph  /////\n      ////////////////////////\n      const nodes = gNodes\n        .selectAll(\".node\")\n        .data(data, d => d) \n        .join(\"circle\")\n          .classed(\"node\", true)\n          .attr(\"r\", 5) \n          //.attr(\"fill\", d => continentsColours[d.continent])\n          .attr(\"fill\", d => (\n            countriesMultipleContinents.includes(d.country)\n            ? \"url(#linear-gradient)\"\n            : continentsColours[d.continent]\n          ))\n          .attr(\"fill-opacity\", 0.8)\n          .attr(\"stroke\", d => (\n            countriesMultipleContinents.includes(d.country)\n            ? \"url(#linear-gradient)\"\n            : continentsColours[d.continent]\n          ))\n          .attr(\"stroke-width\", 3)\n          .attr(\"stroke-opacity\", 1)\n\n      function tick() {\n        nodes\n        .attr(\"cx\", d => d.x)\n        .attr(\"cy\", d => d.y);\n      }\n\n      /// define the force ///\n      const simulation = d3.forceSimulation(data)\n        // the .strength() for x and y forces can slow them down and speed them up \n        .force(\"y\", d3.forceY((d, i) => height/1.6 - startingYPosition).strength(0.01))\n        .force(\"x\", d3.forceX((d, i) =>  xScale(+d.first_year) + xScale.bandwidth()/2 - startingXPosition).strength(0.03))\n        .force(\"collide\", d3.forceCollide(10))\n        .alphaDecay(0.001) // this makes the collide force more or less gittery\n        .on(\"tick\", tick)\n        .stop();\n\n      tick();\n\n      ///////////////////\n      /// Play button ///\n      ///////////////////\n      const playButton = d3.select(playButtonRef.current)\n        .on(\"click\", function() {\n          setTimeout(() => {\n            simulation.restart();\n            nodes.transition().attr(\"r\", r => 6);\n          }, 500);\n        })\n\n      ///////////////////\n      ///// Tooltip /////\n      ///////////////////\n      const tooltip = d3.select(tooltipRef.current)\n      nodes\n      .on('mouseenter', (e, datum) => {\n        tooltip \n        .style('transform', d => `translate(\n            ${xScale(+datum.first_year)}px,\n            ${120}px`\n          ) \n        .style(\"opacity\", 1)\n        .text(`${datum.country} ${datum.first_year}`)\n      })\n      .on('mouseleave', () => {\n        tooltip.style(\"opacity\", 0)\n      })\n\n      ///////////////////\n      ///// Legend //////\n      ///////////////////\n      const legendG = d3.select(legendRef.current)\n        .attr(\"transform\", `translate(${0}, ${margin.top})`)\n      \n      const legendScale = d3.scaleBand()\n        .domain(Object.keys(continentsColours))\n        .range([width/2.5, width/1.8])\n\n      // Groups for each circle-continent paid \n      const legendGroups = legendG\n        .selectAll(\".legend-group\")\n        .data(Object.keys(continentsColours))\n        .join(\"g\")\n        .classed(\"legend-group\", true)\n        .attr(\"transform\", d => `translate(${legendScale(d) + legendScale.bandwidth()/2}, ${0})`)\n\n      // Title on top of the legend \n      const legendTitle = legendG\n        .selectAll(\".legend-title\")\n        .data(['each circle = country, coloured by continent; click to filter'])\n        .join(\"text\")\n        .classed(\"legend-text\", true)\n        .text(d => d)\n        .attr(\"transform\", `translate(${width/2.5 - 25}, ${-28})`)\n        .attr(\"dy\", \"0.35em\")\n        .style(\"fill\", \"#219ebc\")\n      \n      // Circles for the legend \n      const legendCircles = legendGroups \n        .selectAll(\".legend-circle\")\n        .data(d => [d])\n        .join(\"circle\")\n        .classed(\"legend-circle\", true)\n          .attr(\"r\", 10)\n          .attr(\"fill\", d => continentsColours[d])\n          .attr(\"fill-opacity\", 0.8)\n          .attr(\"stroke\", d => continentsColours[d])\n          .attr(\"stroke-width\", 3)\n          .attr(\"stroke-opacity\", 1)\n\n\n      // X Axis \n      const legendXAxis = g => g\n        .call(d3.axisBottom(legendScale).tickFormat(\n          i => i == \"missing\" ? \"no longer exists / renamed / other\" : i\n        ))\n        .attr(\"transform\", `translate(${0}, ${45})`)\n        .call(g => g.select(\".domain\").remove())\n        .call(g => g.selectAll(\"text\")\n          .attr(\"transform\", `rotate(-30)`)\n          .attr(\"text-anchor\", \"end\")\n          .style(\"fill\", d => continentsColours[d])\n          .attr(\"font-family\", 'Indie Flower, cursive')\n          .style(\"font-size\", \"1.2em\")\n        )\n        .call(g => g.selectAll(\".tick\")\n          .style(\"color\", d => continentsColours[d])\n        )\n\n      d3.select(legendAxisRef.current).call(legendXAxis)\n\n      // Events on the legend \n      legendCircles\n        .on(\"click\", function(e, datum) {\n          legendCircles\n            .attr(\"fill-opacity\", d => d == datum ? 0.8 : 0.06)\n            .attr(\"stroke-opacity\", d => d == datum ? 1 : 0.1)\n          d3.select(legendAxisRef.current).call(legendXAxis)\n            .call(g => g.selectAll(\".tick\")\n            .style(\"opacity\", d => d == datum ? 1 : 0.06)\n          )\n          nodes\n            .attr(\"fill-opacity\", d => \n            d.continent == datum ? 0.8 : 0.06\n            )\n            .attr(\"stroke-opacity\", d => d.continent == datum ? 1 : 0.1)\n        })\n\n\n        // for the event where we restore the opacity when we click outisde the legend \n        svg\n          .on(\"click\",function(e, datum){\n            // check if the click ocurred on the target or not \n            // if it's \"false\" then the click did not happen on the target \n            console.log(e.target)\n            console.log(this == e.target)\n            if (this == e.target) {\n              legendCircles\n                .attr(\"fill-opacity\", 0.8)\n                .attr(\"stroke-opacity\", 1)\n              d3.select(legendAxisRef.current).call(legendXAxis)\n                .call(g => g.selectAll(\".tick\")\n                .style(\"opacity\", 1)\n              ) \n              nodes\n                .attr(\"fill-opacity\", 0.8)\n                .attr(\"stroke-opacity\", 1)\n            }\n        });\n\n\n      \n\n\n\n    } \n  }, [data]);\n\n  const toggleGraphExplanation = () => {\n    setRevealGraphExplanation(!revealGraphExplanation)\n  }\n\n  return (\n    <div className=\"page-container page-container-first-time\" id=\"first-time\">\n      <h2 className=\"graph-title graph-title-first-time\">When did countries first participate in the Olympics?</h2>\n      <div className=\"mascot-first-time\"></div>\n\n      <button className=\"icon home-icon\">\n        <a href=\"#home\" className=\"home-first-time\"><FontAwesomeIcon icon={faHome}/></a>\n        <span className=\"info-span\"></span>\n      </button>  \n\n      <button \n        className=\"icon graph-explain-icon\" \n        onClick={toggleGraphExplanation}\n      >\n        <FontAwesomeIcon icon={faBookOpen} />\n        <span className=\"info-span\"></span>\n      </button>  \n      {\n        revealGraphExplanation \n        ? <GraphExplain />\n        : null\n      } \n\n      <div className=\"wrapper wrapper-first-time\">\n        <svg ref={svgRef} width={width} height={height}>\n          <g ref={gRef}></g>\n          <g ref={xAxisRef}></g>\n          <g ref={legendRef}></g>\n          <g ref={legendAxisRef}></g>\n        </svg>\n        <div className=\"play-button-first-time\" ref={playButtonRef}>play</div>\n        <div className=\"tooltip-first-time\" ref={tooltipRef}>Tooltip</div>\n      </div>\n\n    </div>\n  )\n};\n\nexport default FirstTimeParticipate;","/Users/dea/Code/Projects/olympics/src/Components/SustainabilityTimeline/SustainabilityTimeline.js",["77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93"],"// Data from https://www.researchgate.net/publication/340446440_ENVIRONMENTAL_SUSTAINABILITY_OF_OLYMPIC_GAMES_A_NARRATIVE_REVIEW_OF_EVENTS_INITIATIVES_IMPACT_AND_HIDDEN_ASPECTS\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./SustainabilityTimeline.css\";\nimport _ from \"lodash\";\nimport chroma from \"chroma-js\";\nimport rough from 'roughjs/bundled/rough.cjs';\nimport dataLoad from \"../../data/environmental_cal.csv\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBookOpen, faLaughBeam, faHome } from '@fortawesome/free-solid-svg-icons'\n\nconst GraphExplain = () => {\n  return (\n    <div className=\"graph-explain-container\">\n      <p>Data source: <a href=\"https://www.researchgate.net/publication/340446440_ENVIRONMENTAL_SUSTAINABILITY_OF_OLYMPIC_GAMES_A_NARRATIVE_REVIEW_OF_EVENTS_INITIATIVES_IMPACT_AND_HIDDEN_ASPECTS\" target=\"_blank\">\n        \"Maria Konstantaki (2018) \"Environmental Sustainability of Olympic Games: a Narrative Review of Events, Initiatives, Impact and Hidden Aspects\"\n        </a>\n      </p>\n      <p className=\"disclaimer\"> \n        Timeline of major positive and negative environmental events/initiatives/outcomes at or related to the Olympics. Based on events described in paper by Maria Konstantaki (2018). \n      </p>\n      <p className=\"disclaimer\"> \n        What do you think the positive and negative environmental impact of the Olympics is? Do you know about the recycling efforts for Tokyo 2020? Why do you think the medals were made from recycled electronics, for example? What would you do if you were organising the games to ensure they have a positive impact? \n      </p>\n    </div>\n  )\n}\n\nconst SustainabilityTimeline = () => {\n\n  /// refs ///\n  const svgRef = useRef();\n  const xAxisRef = useRef();\n  const gRef = useRef();\n  const tooltipRef = useRef();\n  const legendRef = useRef();\n\n  /// states ///\n  const [data, setData] = useState(null);\n  const [revealGraphExplanation, setRevealGraphExplanation] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n\n  /// constatns ///\n  // dimensions \n  const width = 1100;\n  const height = 500;\n  const margin = {top: 20, right: 50, bottom: 0, left: 50}\n  // colours \n  const positiveColour = chroma(\"#43aa8b\").saturate(1)\n  const negativeColour = chroma(\"#f8961e\").saturate(1)\n  const greenColour = \"#43aa8b\"\n\n\n  /// Data load ///\n  useEffect(() => {\n    d3.csv(dataLoad, d3.autoType).then(d => {\n      setData(d)\n    })\n  }, []);\n\n  /// D3 Code ///\n  useEffect(() => {\n    if (data) {\n\n      let rc = rough.svg(document.getElementById(\"svg-sustainability-timeline\"));\n\n      /// Scales ///\n      // X Scale - year timeline \n      const xScale = d3.scalePoint()\n        .domain(data.map(d => d.year))\n        .range([margin.left, width - margin.right])\n\n\n      /// Axes ///\n      // X Axis - the years timeline \n      const xAxis = g => g\n        .attr(\"transform\", `translate(${0}, ${height/1.5})`)\n        .call(d3.axisBottom(xScale).tickFormat(i => i).tickSizeOuter(0))\n        .call(g => g.select(\".domain\")\n          .attr(\"color\", greenColour)\n          .attr(\"stroke-width\", 8)\n          .attr(\"stroke-linecap\", \"round\")\n        )\n        .call(g => g.selectAll(\".tick\").selectAll(\"line\").remove())\n        .call(g => g.selectAll(\"text\")\n          .attr(\"fill\", greenColour)\n          .attr(\"font-size\", \"18px\")\n          .attr(\"font-family\", 'Indie Flower, cursive')\n        )\n        \n      // call the axis \n      d3.select(xAxisRef.current).call(xAxis)\n\n      /// Graph ///\n      // Graphing area\n      const g = d3.select(gRef.current)\n      .attr(\"transform\", `translate(${0}, ${height/1.5})`)\n\n      // one group for each event\n      const timelineLinesGroups = g\n        .selectAll(\".timeline-lines\")\n        .data(data)\n        .join(\"g\")\n        .classed(\"timeline-lines\", true)\n          .attr(\"transform\", d => `translate(${xScale(d.year)}, ${0})`)\n\n      // draw lines extending from the year when each event happend \n      // either up or down depending on whether the event outcome \n      // was positive or negative\n      const timelineLines = timelineLinesGroups\n        .append(\"line\")\n          .attr(\"y1\", 0)\n          .attr(\"y2\", d => \n          (d.polarity == \"negative\") \n            ? 100\n            : d.olympics == \"no\"\n            ? -200\n            : -100\n          )\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 3)\n          .attr(\"stroke-opacity\", 0.5)\n          .attr(\"stroke-dasharray\", \"1 1\")\n\n\n      // draw one shape (circle) for each event that happened\n      // use conditionals to change the colour or the pattern of the fill \n      // based on whether the even was an olympics or good or bad outcome\n      const eventShapes = timelineLinesGroups\n        .each(function(d, i) {\n          \n          d3.select(this).node()\n            .appendChild(\n              rc.circle(0, \n                d.polarity == \"negative\"\n                ? 100\n                : d.olympics == \"no\"\n                  ? -200\n                : -100, \n                80, {\n                stroke: d.polarity == 'negative' ? negativeColour : positiveColour,\n                strokeWidth: 1.7,\n                fillStyle: d.olympics == 'no' ? 'zigzag-line' : 'cross-hatch',\n                fill: d.polarity == 'negative' ? negativeColour : positiveColour,\n                roughness: 2,\n          })\n          )\n        })\n\n\n      // Add a normal circle behind each rough circle just for the hover events\n      const eventCircles = timelineLinesGroups\n        .selectAll(\".event-circle\")\n        .data(d => [d])\n        .join(\"circle\")\n        .classed(\"event-circle\", true)\n          .attr(\"cx\", 0)\n          .attr(\"cy\", d => d.polarity == \"negative\"? 100 : d.olympics == \"no\" ? -200 : -100)\n          .attr(\"r\", 40)\n          .attr(\"opacity\", 0.5)\n          .attr(\"fill\", d => d.polarity == 'negative' ? negativeColour : positiveColour)\n\n\n      /// Tooltip ///\n      const tooltip = d3.select(tooltipRef.current)\n      eventCircles\n      .on('mouseenter', (e, datum) => {\n        setSelectedEvent(datum)\n        tooltip \n        .style('transform', d => `translate(\n            ${xScale(datum.year)}px,\n            ${\n              datum.polarity == \"negative\"\n              ? 100 + 100\n              : datum.olympics == \"no\"\n                ? 50\n              : 100\n            }px`\n          ) \n        .style(\"opacity\", 1)\n      })\n      .on('mouseleave', () => {\n        tooltip.style(\"opacity\", 0)\n      })\n\n      /////////////////////\n      ///// legend ///////\n      ///////////////////\n\n      const legend = d3.select(legendRef.current)\n\n      // positive outcome \n      legend.each(function(d, i) {\n        d3.select(this).node()\n          .appendChild(\n            rc.circle(width - margin.right - 160, margin.top, 20, {\n              stroke: positiveColour,\n              strokeWidth: 1,\n              fillStyle: 'cross-hatch',\n              fill: positiveColour,\n              roughness: 1.7,\n          })\n        )\n      }) \n      legend.selectAll(\".legend-label-positive\").data(['positive outcome']).join(\"text\")\n        .classed(\"legend-label-positive\", true)\n        .text(d => d)\n        .attr(\"transform\", `translate(${width - margin.right - 290}, ${margin.top})`)\n        .attr(\"dy\", \"0.35em\")\n        .style(\"fill\", positiveColour)\n\n      // negative outcome \n      legend.each(function(d, i) {\n        d3.select(this).node()\n          .appendChild(\n            rc.circle(width - margin.right, margin.top, 20, {\n              stroke: negativeColour,\n              strokeWidth: 1,\n              fillStyle: 'cross-hatch',\n              fill: negativeColour,\n              roughness: 1.7,\n          })\n        )\n      })   \n      legend.selectAll(\".legend-label-negative\").data(['negative outcome']).join(\"text\")\n        .classed(\"legend-label-negative\", true)\n        .text(d => d)\n        .attr(\"transform\", `translate(${width - margin.right - 130}, ${margin.top})`)\n        .attr(\"dy\", \"0.35em\")\n        .style(\"fill\", negativeColour)     \n\n\n\n    } \n  }, [data]);\n\n  const toggleGraphExplanation = () => {\n    setRevealGraphExplanation(!revealGraphExplanation)\n  }\n\n  return (\n    <div className=\"page-container page-container-sustainability-timeline\" id=\"environment\">\n      <div className=\"mascot-sustainability-timeline\"></div>\n      <h2 className=\"graph-title graph-title-sustainability-timeline\">How do the Olympics impact the environment?</h2>\n\n      <button className=\"icon home-icon\">\n        <a href=\"#home\" className=\"home-sustainability-timeline\"><FontAwesomeIcon icon={faHome}/></a>\n        <span className=\"info-span\"></span>\n      </button>  \n\n      <button \n        className=\"icon graph-explain-icon\" \n        onClick={toggleGraphExplanation}\n      >\n        <FontAwesomeIcon icon={faBookOpen} />\n        <span className=\"info-span\"></span>\n      </button>  \n      {\n        revealGraphExplanation \n        ? <GraphExplain />\n        : null\n      } \n\n      <div className=\"wrapper wrapper-sustainability-timeline\">\n        <svg id=\"svg-sustainability-timeline\" ref={svgRef} width={width} height={height}>\n            <g ref={gRef}></g>\n            <g ref={xAxisRef}></g>\n            <g ref={legendRef}></g>\n        </svg>\n        <div className=\"tooltip-sustainability-timeline\" ref={tooltipRef}>\n          { selectedEvent ?\n           <div>\n             {selectedEvent.polarity === \"positive\" ? \n              <>\n                <span className=\"tooltip-sustainability-timeline-title tooltip-sustainability-timeline-pos\"><FontAwesomeIcon icon={faLaughBeam} /></span>\n                <span className=\"tooltip-sustainability-timeline-title tooltip-sustainability-timeline-pos\">{selectedEvent.event}</span>\n              </>\n             : \n              <>\n                <span className=\"tooltip-sustainability-timeline-title tooltip-sustainability-timeline-neg\">{selectedEvent.event}</span>\n              </>\n             }\n              <span className=\"tooltip-sustainability-timeline-info\">{selectedEvent.notes}</span>     \n            </div> \n            : null\n          }\n        </div>\n      </div>\n\n    </div>\n  )\n};\n\nexport default SustainabilityTimeline;","/Users/dea/Code/Projects/olympics/src/Components/Footer/Footer.js",[],"/Users/dea/Code/Projects/olympics/src/Components/FrontPage/FrontPage.js",["94"],"/Users/dea/Code/Projects/olympics/src/Components/FemalePies/Pie.js",["95","96","97","98","99","100","101","102"],"import React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./FemalePies.css\";\nimport _ from \"lodash\";\nimport chroma from \"chroma-js\";\nimport rough from 'roughjs/bundled/rough.cjs';\n\n\n\nconst Pie = ({ show, setShow }) => {\n\n  /// refs ///\n  const svgRef = useRef();\n  const gRef = useRef();\n  const revealButtonRef = useRef();\n\n  /// constatns ///\n  // dimensions \n  const height = 370;\n  const width = height;\n  // for the pies \n  const pieSize = 370; \n  const innerRadius = 60;\n  const outerRadius = pieSize/2 - 10;\n  const padAngle = 0.1;\n  const conerRadius = 15;\n  // colours \n  const colourFemale = chroma(\"#ff006e\").saturate(0)\n  const colourMale = chroma(\"#219ebc\").saturate(2)\n\n\n\n  /// D3 Code ///\n  useEffect(() => {\n\n      /////////////////////////////////////////////\n      /////////// Rough JS Define /////////////////\n      /////////////////////////////////////////////\n      let rc = rough.svg(document.getElementById(\"svg-pie\"));\n\n      /////////////////////////////////////////////\n      //////////////// Graph //////////////////////\n      /////////////////////////////////////////////\n      const svgD3 = d3.select(svgRef.current).attr(\"width\", width).attr(\"height\", height);\n      // 1. Pie\n      // this is what you use on the data\n      const pie = d3\n        .pie()\n        .sort(null)\n        .value((d) => d.percentage);\n\n      // 2. Arc\n      // this is what you use when drawing the graph\n      // it becomes the d attribute of paths\n      const arc = d3\n        .arc()\n        .innerRadius(innerRadius)\n        .outerRadius(outerRadius)\n        .padAngle(padAngle)\n        .cornerRadius(conerRadius);\n      // Graph area\n      const g = d3.select(gRef.current)\n        .attr(\"transform\", `translate(${width/2}, ${height/2})`)\n\n      const data = \n      [\n        {gender: \"male\", percentage: 50, year: 0},\n        {gender: \"female\", percentage: 50, year: 0},\n      ]\n\n      // draw the pie chart\n      const pieCharts = g\n        .each(function(d, i) {\n          d3.select(this).node()\n          // draw part for the male \n            .appendChild(\n              rc.path(arc(pie(data)[0]), {\n                stroke: colourMale,\n                strokeWidth: 1,\n                fillStyle: 'cross-hatch',\n                fill: colourMale,\n                roughness: 2.5,\n          }))\n          // draw part for the female \n            .appendChild(\n              rc.path(arc(pie(data)[1]), {\n                stroke: colourFemale,\n                strokeWidth: 0.8,\n                fillStyle: 'zigzag',\n                fill: colourFemale,\n                roughness: 2.2,\n          }))\n        });\n\n      // draw the pie chart again for thicker lines\n      const pieCharts2 = g\n        .each(function(d, i) {\n          d3.select(this).node()\n          // draw part for the male \n            .appendChild(\n              rc.path(arc(pie(data)[0]), {\n                stroke: colourMale,\n                strokeWidth: 1,\n                fillStyle: 'cross-hatch',\n                fill: colourMale,\n                roughness: 2.5,\n          }))\n          // draw part for the female \n            .appendChild(\n              rc.path(arc(pie(data)[1]), {\n                stroke: colourFemale,\n                strokeWidth: 0.8,\n                fillStyle: 'zigzag',\n                fill: colourFemale,\n                roughness: 2.2,\n          }))\n        });\n\n      ////////////////////////////\n      ///////// Button //////////\n      //////////////////////////\n      const revealButton = d3.select(revealButtonRef.current)\n        .attr(\"transform\", `translate(${width/2}, ${height/2})`)\n\n      const revealButtonCircle = revealButton.selectAll(\".button-circle\").data([0]).join(\"circle\")\n        .classed(\"button-circle\", true)\n          .attr(\"r\", 40)\n          .attr(\"fill\", \"white\")\n          .attr(\"stroke\", \"#AB2E64\")\n          .attr(\"stroke-width\", 5)\n\n      const revealButtonText = revealButton.selectAll(\".button-text\").data([\"show\"]).join(\"text\")\n        .classed(\"button-text\", true)\n          .text(d => d)\n          .attr(\"fill\", \"#AB2E64\")\n          .attr(\"dy\", \"0.35em\")\n          .style(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"20px\")\n          .attr(\"cursor\", \"default\")\n\n      revealButton.on(\"click\", function(){setShow(true)})\n\n\n  }, [show]);\n\n  return (\n      <div className=\"wrapper wrapper-female-pies\">\n        <svg ref={svgRef} id=\"svg-pie\">\n          <g ref={gRef}></g>\n          <g ref={revealButtonRef}></g>\n        </svg>\n      </div>\n  )\n};\n\nexport default Pie;",{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":1,"column":16,"nodeType":"109","messageId":"110","endLine":1,"endColumn":24},{"ruleId":"111","severity":1,"message":"112","line":15,"column":23,"nodeType":"113","endLine":15,"endColumn":219},{"ruleId":"107","severity":1,"message":"114","line":119,"column":13,"nodeType":"109","messageId":"110","endLine":119,"endColumn":18},{"ruleId":"107","severity":1,"message":"115","line":155,"column":13,"nodeType":"109","messageId":"110","endLine":155,"endColumn":26},{"ruleId":"107","severity":1,"message":"116","line":164,"column":13,"nodeType":"109","messageId":"110","endLine":164,"endColumn":22},{"ruleId":"117","severity":1,"message":"118","line":168,"column":74,"nodeType":"119","messageId":"120","endLine":168,"endColumn":76},{"ruleId":"121","severity":1,"message":"122","line":197,"column":6,"nodeType":"123","endLine":197,"endColumn":21,"suggestions":"124"},{"ruleId":"107","severity":1,"message":"125","line":12,"column":10,"nodeType":"109","messageId":"110","endLine":12,"endColumn":32},{"ruleId":"111","severity":1,"message":"112","line":22,"column":9,"nodeType":"113","endLine":22,"endColumn":89},{"ruleId":"111","severity":1,"message":"112","line":24,"column":9,"nodeType":"113","endLine":24,"endColumn":86},{"ruleId":"107","severity":1,"message":"126","line":133,"column":13,"nodeType":"109","messageId":"110","endLine":133,"endColumn":26},{"ruleId":"107","severity":1,"message":"127","line":147,"column":13,"nodeType":"109","messageId":"110","endLine":147,"endColumn":31},{"ruleId":"107","severity":1,"message":"128","line":211,"column":11,"nodeType":"109","messageId":"110","endLine":211,"endColumn":23},{"ruleId":"107","severity":1,"message":"129","line":248,"column":13,"nodeType":"109","messageId":"110","endLine":248,"endColumn":23},{"ruleId":"117","severity":1,"message":"118","line":253,"column":71,"nodeType":"119","messageId":"120","endLine":253,"endColumn":73},{"ruleId":"117","severity":1,"message":"118","line":293,"column":34,"nodeType":"119","messageId":"120","endLine":293,"endColumn":36},{"ruleId":"121","severity":1,"message":"130","line":306,"column":6,"nodeType":"123","endLine":306,"endColumn":45,"suggestions":"131"},{"ruleId":"111","severity":1,"message":"112","line":15,"column":23,"nodeType":"113","endLine":15,"endColumn":137},{"ruleId":"107","severity":1,"message":"132","line":67,"column":13,"nodeType":"109","messageId":"110","endLine":67,"endColumn":23},{"ruleId":"107","severity":1,"message":"133","line":165,"column":13,"nodeType":"109","messageId":"110","endLine":165,"endColumn":23},{"ruleId":"107","severity":1,"message":"134","line":210,"column":13,"nodeType":"109","messageId":"110","endLine":210,"endColumn":24},{"ruleId":"117","severity":1,"message":"118","line":237,"column":18,"nodeType":"119","messageId":"120","endLine":237,"endColumn":20},{"ruleId":"117","severity":1,"message":"118","line":258,"column":42,"nodeType":"119","messageId":"120","endLine":258,"endColumn":44},{"ruleId":"117","severity":1,"message":"118","line":259,"column":44,"nodeType":"119","messageId":"120","endLine":259,"endColumn":46},{"ruleId":"117","severity":1,"message":"118","line":262,"column":38,"nodeType":"119","messageId":"120","endLine":262,"endColumn":40},{"ruleId":"117","severity":1,"message":"118","line":266,"column":25,"nodeType":"119","messageId":"120","endLine":266,"endColumn":27},{"ruleId":"117","severity":1,"message":"118","line":268,"column":54,"nodeType":"119","messageId":"120","endLine":268,"endColumn":56},{"ruleId":"117","severity":1,"message":"118","line":278,"column":30,"nodeType":"119","messageId":"120","endLine":278,"endColumn":32},{"ruleId":"117","severity":1,"message":"118","line":279,"column":22,"nodeType":"119","messageId":"120","endLine":279,"endColumn":24},{"ruleId":"121","severity":1,"message":"135","line":299,"column":6,"nodeType":"123","endLine":299,"endColumn":12,"suggestions":"136"},{"ruleId":"107","severity":1,"message":"137","line":6,"column":8,"nodeType":"109","messageId":"110","endLine":6,"endColumn":9},{"ruleId":"111","severity":1,"message":"112","line":16,"column":23,"nodeType":"113","endLine":16,"endColumn":213},{"ruleId":"107","severity":1,"message":"138","line":111,"column":13,"nodeType":"109","messageId":"110","endLine":111,"endColumn":26},{"ruleId":"117","severity":1,"message":"118","line":115,"column":23,"nodeType":"119","messageId":"120","endLine":115,"endColumn":25},{"ruleId":"117","severity":1,"message":"118","line":117,"column":26,"nodeType":"119","messageId":"120","endLine":117,"endColumn":28},{"ruleId":"107","severity":1,"message":"139","line":130,"column":13,"nodeType":"109","messageId":"110","endLine":130,"endColumn":24},{"ruleId":"117","severity":1,"message":"118","line":136,"column":28,"nodeType":"119","messageId":"120","endLine":136,"endColumn":30},{"ruleId":"117","severity":1,"message":"118","line":138,"column":30,"nodeType":"119","messageId":"120","endLine":138,"endColumn":32},{"ruleId":"117","severity":1,"message":"118","line":142,"column":36,"nodeType":"119","messageId":"120","endLine":142,"endColumn":38},{"ruleId":"117","severity":1,"message":"118","line":144,"column":39,"nodeType":"119","messageId":"120","endLine":144,"endColumn":41},{"ruleId":"117","severity":1,"message":"118","line":145,"column":34,"nodeType":"119","messageId":"120","endLine":145,"endColumn":36},{"ruleId":"117","severity":1,"message":"118","line":159,"column":39,"nodeType":"119","messageId":"120","endLine":159,"endColumn":41},{"ruleId":"117","severity":1,"message":"118","line":159,"column":71,"nodeType":"119","messageId":"120","endLine":159,"endColumn":73},{"ruleId":"117","severity":1,"message":"118","line":162,"column":41,"nodeType":"119","messageId":"120","endLine":162,"endColumn":43},{"ruleId":"117","severity":1,"message":"118","line":174,"column":30,"nodeType":"119","messageId":"120","endLine":174,"endColumn":32},{"ruleId":"117","severity":1,"message":"118","line":176,"column":32,"nodeType":"119","messageId":"120","endLine":176,"endColumn":34},{"ruleId":"121","severity":1,"message":"140","line":236,"column":6,"nodeType":"123","endLine":236,"endColumn":12,"suggestions":"141"},{"ruleId":"111","severity":1,"message":"112","line":17,"column":600,"nodeType":"113","endLine":17,"endColumn":678},{"ruleId":"107","severity":1,"message":"108","line":1,"column":17,"nodeType":"109","messageId":"110","endLine":1,"endColumn":25},{"ruleId":"107","severity":1,"message":"137","line":4,"column":8,"nodeType":"109","messageId":"110","endLine":4,"endColumn":9},{"ruleId":"107","severity":1,"message":"114","line":44,"column":13,"nodeType":"109","messageId":"110","endLine":44,"endColumn":18},{"ruleId":"107","severity":1,"message":"116","line":72,"column":13,"nodeType":"109","messageId":"110","endLine":72,"endColumn":22},{"ruleId":"107","severity":1,"message":"142","line":96,"column":13,"nodeType":"109","messageId":"110","endLine":96,"endColumn":23},{"ruleId":"107","severity":1,"message":"143","line":125,"column":13,"nodeType":"109","messageId":"110","endLine":125,"endColumn":31},{"ruleId":"107","severity":1,"message":"144","line":132,"column":13,"nodeType":"109","messageId":"110","endLine":132,"endColumn":29},{"ruleId":"121","severity":1,"message":"145","line":144,"column":6,"nodeType":"123","endLine":144,"endColumn":12,"suggestions":"146"},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'svgD3' is assigned a value but never used.","'pieChartsText' is assigned a value but never used.","'pieCharts' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'colourFemale', 'colourMale', 'height', 'margin.right', 'margin.top', and 'outerRadius'. Either include them or remove the dependency array.","ArrayExpression",["149"],"'annotationCalloutElbow' is defined but never used.","'athletesGraph' is assigned a value but never used.","'athletesGraphRough' is assigned a value but never used.","'myAnnotation' is assigned a value but never used.","'sportsLogo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'margin.left', 'margin.right', and 'margin.top'. Either include them or remove the dependency array.",["150"],"'continents' is assigned a value but never used.","'playButton' is assigned a value but never used.","'legendTitle' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'margin.bottom', 'margin.left', 'margin.right', and 'margin.top'. Either include them or remove the dependency array.",["151"],"'_' is defined but never used.","'timelineLines' is assigned a value but never used.","'eventShapes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'margin.left', 'margin.right', 'margin.top', 'negativeColour', and 'positiveColour'. Either include them or remove the dependency array.",["152"],"'pieCharts2' is assigned a value but never used.","'revealButtonCircle' is assigned a value but never used.","'revealButtonText' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'colourFemale', 'colourMale', 'outerRadius', 'setShow', and 'width'. Either include them or remove the dependency array. If 'setShow' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["153"],"no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},"Update the dependencies array to be: [colourFemale, colourMale, dataAll, height, margin.right, margin.top, outerRadius, show]",{"range":"164","text":"165"},"Update the dependencies array to be: [data, dataSports, margin.left, margin.right, margin.top, sports, sportsLogos]",{"range":"166","text":"167"},"Update the dependencies array to be: [data, margin.bottom, margin.left, margin.right, margin.top]",{"range":"168","text":"169"},"Update the dependencies array to be: [data, margin.left, margin.right, margin.top, negativeColour, positiveColour]",{"range":"170","text":"171"},"Update the dependencies array to be: [colourFemale, colourMale, outerRadius, setShow, show, width]",{"range":"172","text":"173"},[6450,6465],"[colourFemale, colourMale, dataAll, height, margin.right, margin.top, outerRadius, show]",[10665,10704],"[data, dataSports, margin.left, margin.right, margin.top, sports, sportsLogos]",[10245,10251],"[data, margin.bottom, margin.left, margin.right, margin.top]",[8098,8104],"[data, margin.left, margin.right, margin.top, negativeColour, positiveColour]",[4314,4320],"[colourFemale, colourMale, outerRadius, setShow, show, width]"]