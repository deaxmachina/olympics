[{"/Users/user/Code/Projects/olympics/website/src/index.js":"1","/Users/user/Code/Projects/olympics/website/src/App.js":"2","/Users/user/Code/Projects/olympics/website/src/Components/FemalePies/FemalePies.js":"3","/Users/user/Code/Projects/olympics/website/src/Components/SustainabilityTimeline/SustainabilityTimeline.js":"4","/Users/user/Code/Projects/olympics/website/src/Components/FirstTimeParticipate/FirstTimeParticipate.js":"5","/Users/user/Code/Projects/olympics/website/src/Components/FemalePies/Pie.js":"6","/Users/user/Code/Projects/olympics/website/src/Components/Paralympics/Paralympics.js":"7","/Users/user/Code/Projects/olympics/website/src/Components/FrontPage/FrontPage.js":"8"},{"size":150,"mtime":1611906477502,"results":"9","hashOfConfig":"10"},{"size":633,"mtime":1613377721170,"results":"11","hashOfConfig":"10"},{"size":7522,"mtime":1613869881424,"results":"12","hashOfConfig":"10"},{"size":9980,"mtime":1613867892834,"results":"13","hashOfConfig":"10"},{"size":11348,"mtime":1613867499425,"results":"14","hashOfConfig":"10"},{"size":4561,"mtime":1611922959380,"results":"15","hashOfConfig":"10"},{"size":12114,"mtime":1613870343380,"results":"16","hashOfConfig":"10"},{"size":1514,"mtime":1613389411996,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1bmzwoz",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/user/Code/Projects/olympics/website/src/index.js",[],["39","40"],"/Users/user/Code/Projects/olympics/website/src/App.js",["41"],"import React, {useState} from \"react\";\nimport \"./App.css\";\nimport FemalePies from \"./Components/FemalePies/FemalePies\";\nimport SustainabilityTimeline from \"./Components/SustainabilityTimeline/SustainabilityTimeline\";\nimport FirstTimeParticipate from \"./Components/FirstTimeParticipate/FirstTimeParticipate\"\nimport Paralympics from \"./Components/Paralympics/Paralympics\";\nimport FrontPage from \"./Components/FrontPage/FrontPage\"\n\nconst App = () => {\n  \n  return (\n    <>\n      <FrontPage />\n      <FirstTimeParticipate />\n      <Paralympics />\n      <SustainabilityTimeline />\n      <FemalePies />\n\n    </>\n  )\n};\n\nexport default App;","/Users/user/Code/Projects/olympics/website/src/Components/FemalePies/FemalePies.js",["42","43","44","45","46","47"],"/Users/user/Code/Projects/olympics/website/src/Components/SustainabilityTimeline/SustainabilityTimeline.js",["48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66"],"// Data from https://www.researchgate.net/publication/340446440_ENVIRONMENTAL_SUSTAINABILITY_OF_OLYMPIC_GAMES_A_NARRATIVE_REVIEW_OF_EVENTS_INITIATIVES_IMPACT_AND_HIDDEN_ASPECTS\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./SustainabilityTimeline.css\";\nimport _ from \"lodash\";\nimport chroma from \"chroma-js\";\nimport rough from 'roughjs/bundled/rough.cjs';\nimport dataLoad from \"../../data/environmental_cal.csv\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBookOpen, faTree, faGrinStars, faLaughBeam } from '@fortawesome/free-solid-svg-icons'\n\nconst GraphExplain = () => {\n  return (\n    <div className=\"graph-explain-container\">\n      <p>Data source: <a href=\"https://www.researchgate.net/publication/340446440_ENVIRONMENTAL_SUSTAINABILITY_OF_OLYMPIC_GAMES_A_NARRATIVE_REVIEW_OF_EVENTS_INITIATIVES_IMPACT_AND_HIDDEN_ASPECTS\" target=\"_blank\">\n        \"Maria Konstantaki (2018) \"Environmental Sustainability of Olympic Games: a Narrative Review of Events, Initiatives, Impact and Hidden Aspects\"\n        </a>\n      </p>\n      <p className=\"disclaimer\"> \n        Timeline of major positive and negative envornmental events/initiatives/outcomes at or realted to the Olympics. Based on events described in paper by Maria Konstantaki (2018). \n      </p>\n      <p className=\"disclaimer\"> \n        What do you think the positive and negative environmental impacts of the Olympics are? Do you know about the recycling efforts for Tokyo 2020? Why do you think the medals were made from recycled electronics, for example? What would you do? \n      </p>\n    </div>\n  )\n}\n\nconst SustainabilityTimeline = () => {\n\n  /// refs ///\n  const svgRef = useRef();\n  const xAxisRef = useRef();\n  const gRef = useRef();\n  const tooltipRef = useRef();\n  const legendRef = useRef();\n\n  /// states ///\n  const [data, setData] = useState(null);\n  const [revealGraphExplanation, setRevealGraphExplanation] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n\n  /// constatns ///\n  // dimensions \n  const width = 1100;\n  const height = 500;\n  const margin = {top: 20, right: 50, bottom: 0, left: 50}\n  // colours \n  const positiveColour = chroma(\"#43aa8b\").saturate(1)\n  const negativeColour = chroma(\"#f8961e\").saturate(1)\n  const greenColour = \"#43aa8b\"\n\n\n  /// Data load ///\n  useEffect(() => {\n    d3.csv(dataLoad, d3.autoType).then(d => {\n      setData(d)\n    })\n  }, []);\n\n  /// D3 Code ///\n  useEffect(() => {\n    if (data) {\n\n      let rc = rough.svg(document.getElementById(\"svg-sustainability-timeline\"));\n\n      /// Scales ///\n      // X Scale - year timeline \n      const xScale = d3.scalePoint()\n        .domain(data.map(d => d.year))\n        .range([margin.left, width - margin.right])\n\n\n      /// Axes ///\n      // X Axis - the years timeline \n      const xAxis = g => g\n        .attr(\"transform\", `translate(${0}, ${height/1.5})`)\n        .call(d3.axisBottom(xScale).tickFormat(i => i).tickSizeOuter(0))\n        .call(g => g.select(\".domain\")\n          .attr(\"color\", greenColour)\n          .attr(\"stroke-width\", 8)\n          .attr(\"stroke-linecap\", \"round\")\n        )\n        .call(g => g.selectAll(\".tick\").selectAll(\"line\").remove())\n        .call(g => g.selectAll(\"text\")\n          .attr(\"fill\", greenColour)\n          .attr(\"font-size\", \"18px\")\n          .attr(\"font-family\", 'Indie Flower, cursive')\n        )\n        \n      // call the axis \n      d3.select(xAxisRef.current).call(xAxis)\n\n      /// Graph ///\n      // Graphing area\n      const g = d3.select(gRef.current)\n      .attr(\"transform\", `translate(${0}, ${height/1.5})`)\n\n      // one group for each event\n      const timelineLinesGroups = g\n        .selectAll(\".timeline-lines\")\n        .data(data)\n        .join(\"g\")\n        .classed(\"timeline-lines\", true)\n          .attr(\"transform\", d => `translate(${xScale(d.year)}, ${0})`)\n\n      // draw lines extending from the year when each event happend \n      // either up or down depending on whether the event outcome \n      // was positive or negative\n      const timelineLines = timelineLinesGroups\n        .append(\"line\")\n          .attr(\"y1\", 0)\n          .attr(\"y2\", d => \n          (d.polarity == \"negative\") \n            ? 100\n            : d.olympics == \"no\"\n            ? -200\n            : -100\n          )\n          .attr(\"stroke\", \"white\")\n          .attr(\"stroke-width\", 3)\n          .attr(\"stroke-opacity\", 0.5)\n          .attr(\"stroke-dasharray\", \"1 1\")\n\n\n      // draw one shape (circle) for each event that happened\n      // use conditionals to change the colour or the pattern of the fill \n      // based on whether the even was an olympics or good or bad outcome\n      const eventShapes = timelineLinesGroups\n        .each(function(d, i) {\n          \n          d3.select(this).node()\n            .appendChild(\n              rc.circle(0, \n                d.polarity == \"negative\"\n                ? 100\n                : d.olympics == \"no\"\n                  ? -200\n                : -100, \n                80, {\n                stroke: d.polarity == 'negative' ? negativeColour : positiveColour,\n                strokeWidth: 1.7,\n                fillStyle: d.olympics == 'no' ? 'zigzag-line' : 'cross-hatch',\n                fill: d.polarity == 'negative' ? negativeColour : positiveColour,\n                roughness: 2,\n          })\n          )\n        })\n\n\n      // Add a normal circle behind each rough circle just for the hover events\n      const eventCircles = timelineLinesGroups\n        .selectAll(\".event-circle\")\n        .data(d => [d])\n        .join(\"circle\")\n        .classed(\"event-circle\", true)\n          .attr(\"cx\", 0)\n          .attr(\"cy\", d => d.polarity == \"negative\"? 100 : d.olympics == \"no\" ? -200 : -100)\n          .attr(\"r\", 40)\n          .attr(\"opacity\", 0.5)\n          .attr(\"fill\", d => d.polarity == 'negative' ? negativeColour : positiveColour)\n\n\n      /// Tooltip ///\n      const tooltip = d3.select(tooltipRef.current)\n      eventCircles\n      .on('mouseenter', (e, datum) => {\n        console.log(datum)\n        setSelectedEvent(datum)\n        tooltip \n        .style('transform', d => `translate(\n            ${xScale(datum.year)}px,\n            ${\n              datum.polarity == \"negative\"\n              ? 100 + 100\n              : datum.olympics == \"no\"\n                ? -200 + 100\n              : -100 + 100\n            }px`\n          ) \n        .style(\"opacity\", 1)\n      })\n      .on('mouseleave', () => {\n        tooltip.style(\"opacity\", 0)\n      })\n\n      /////////////////////\n      ///// legend ///////\n      ///////////////////\n\n      const legend = d3.select(legendRef.current)\n\n      // positive outcome \n      legend.each(function(d, i) {\n        d3.select(this).node()\n          .appendChild(\n            rc.circle(width - margin.right - 160, margin.top, 20, {\n              stroke: positiveColour,\n              strokeWidth: 1,\n              fillStyle: 'cross-hatch',\n              fill: positiveColour,\n              roughness: 1.7,\n          })\n        )\n      }) \n      legend.selectAll(\".legend-label-positive\").data(['positive outcome']).join(\"text\")\n        .classed(\"legend-label-positive\", true)\n        .text(d => d)\n        .attr(\"transform\", `translate(${width - margin.right - 290}, ${margin.top})`)\n        .attr(\"dy\", \"0.35em\")\n        .style(\"fill\", positiveColour)\n\n      // negative outcome \n      legend.each(function(d, i) {\n        d3.select(this).node()\n          .appendChild(\n            rc.circle(width - margin.right, margin.top, 20, {\n              stroke: negativeColour,\n              strokeWidth: 1,\n              fillStyle: 'cross-hatch',\n              fill: negativeColour,\n              roughness: 1.7,\n          })\n        )\n      })   \n      legend.selectAll(\".legend-label-negative\").data(['negative outcome']).join(\"text\")\n        .classed(\"legend-label-negative\", true)\n        .text(d => d)\n        .attr(\"transform\", `translate(${width - margin.right - 130}, ${margin.top})`)\n        .attr(\"dy\", \"0.35em\")\n        .style(\"fill\", negativeColour)     \n\n\n\n    } \n  }, [data]);\n\n  const toggleGraphExplanation = () => {\n    setRevealGraphExplanation(!revealGraphExplanation)\n  }\n\n  return (\n    <div className=\"page-container page-container-sustainability-timeline\">\n      <div className=\"mascot-sustainability-timeline\"></div>\n      <h2 className=\"graph-title graph-title-sustainability-timeline\">How do the Olympics impact the environment?</h2>\n      <button \n        className=\"graph-explain-icon\" \n        onClick={toggleGraphExplanation}\n      >\n        <FontAwesomeIcon icon={faBookOpen} />\n        <span className=\"info-span\"></span>\n      </button>  \n      {\n        revealGraphExplanation \n        ? <GraphExplain />\n        : null\n      } \n\n      <div className=\"wrapper wrapper-sustainability-timeline\">\n        <svg id=\"svg-sustainability-timeline\" ref={svgRef} width={width} height={height}>\n            <g ref={gRef}></g>\n            <g ref={xAxisRef}></g>\n            <g ref={legendRef}></g>\n        </svg>\n        <div className=\"tooltip-sustainability-timeline\" ref={tooltipRef}>\n          { selectedEvent ?\n           <div>\n             {selectedEvent.polarity === \"positive\" ? \n              <>\n                <span className=\"tooltip-sustainability-timeline-title tooltip-sustainability-timeline-pos\"><FontAwesomeIcon icon={faLaughBeam} /></span>\n                <span className=\"tooltip-sustainability-timeline-title tooltip-sustainability-timeline-pos\">{selectedEvent.event}</span>\n              </>\n             : \n              <>\n                <span className=\"tooltip-sustainability-timeline-title tooltip-sustainability-timeline-neg\">{selectedEvent.event}</span>\n              </>\n             }\n              <span className=\"tooltip-sustainability-timeline-info\">{selectedEvent.notes}</span>     \n            </div> \n            : null\n          }\n        </div>\n      </div>\n\n    </div>\n  )\n};\n\nexport default SustainabilityTimeline;","/Users/user/Code/Projects/olympics/website/src/Components/FirstTimeParticipate/FirstTimeParticipate.js",["67","68","69","70","71","72","73","74","75","76","77","78","79"],"// Data from https://en.wikipedia.org/wiki/List_of_participating_nations_at_the_Summer_Olympic_Games\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./FirstTimeParticipate.css\";\nimport dataLoad from \"../../data/countries_first_year.json\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBookOpen } from '@fortawesome/free-solid-svg-icons'\nimport _ from \"lodash\"\nimport chroma from \"chroma-js\";\n\nconst GraphExplain = () => {\n  return (\n    <div className=\"graph-explain-container\">\n      <p>Data source: <a href=\"https://en.wikipedia.org/wiki/List_of_participating_nations_at_the_Summer_Olympic_Games\" target=\"_blank\">Wikipedia</a></p>\n      <p className=\"disclaimer\">Use the source to research further. Why did certain countries enter the Olympics later than others? Which countries were part of others previously; did they welcome the chance to participate the in the Olympics independantly?</p>\n    </div>\n  )\n}\n\nconst FirstTimeParticipate = () => {\n\n  /// refs ///\n  const svgRef = useRef();\n  const gRef = useRef();\n  const xAxisRef = useRef();\n  const playButtonRef = useRef();\n  const tooltipRef = useRef();\n  const legendRef = useRef();\n  const legendAxisRef = useRef();\n\n  /// states ///\n  const [data, setData] = useState(null);\n  const [revealGraphExplanation, setRevealGraphExplanation] = useState(false);\n\n  /// constatns ///\n  // dimensions \n  const width = 2000;\n  const height = 480;\n  const margin = {top: 35, right: 60, bottom: 27, left: 40}\n\n\n  /// Data load ///\n  useEffect(() => {\n    setData(dataLoad)\n  }, []);\n\n  /// D3 Code ///\n  useEffect(() => {\n    if (data) {\n\n      const svg = d3.select(svgRef.current)\n\n      // find the range of years \n      const years = dataLoad.map(d => +d.first_year).sort((a, b) => a - b)\n\n      // special case: countries on multiple continents - Asia and Europe \n      const countriesMultipleContinents = ['Armenia','Azerbaijan','Cyprus','Georgia','Kazakhstan','Russia','Turkey']\n\n      /// Scales ///\n      const xScale = d3.scaleBand()\n        .domain(years)\n        .range([margin.left, width - margin.right])\n        .padding(0.1)\n\n      // Colour scale for the continents \n      const continents = _.uniq(data.map(d => d.continent))\n      //[\"Asia\", \"missing\", \"Europe\", \"Africa\", \"North America\", \"South America\", \"Oceania\"]\n      const continentsColours = {\n        \"Asia\": \"#ff006e\",\n        \"Europe\": \"#81568F\",\n        \"Africa\": \"#f8961e\",\n        \"North America\": \"#43aa8b\",\n        \"South America\": chroma(\"#219ebc\").saturate(0.5),\n        \"Oceania\": \"#90be6d\",\n        \"missing\": chroma(\"#22223b\").saturate(0.5)\n      }\n\n      // Colour gradient for the counties which are in Europe and Asia \n      const defs = svg.selectAll(\"defs\").data([0]).join(\"defs\")\n      const linearGradient = defs.append(\"linearGradient\")\n        .attr(\"id\", \"linear-gradient\")\n        .attr(\"x1\", 0)\n        .attr(\"y1\", 0)\n        .attr(\"x2\", \"100%\")\n        .attr(\"y2\", \"100%\");\n      //Set the color for the start (0%)\n      linearGradient.append(\"stop\") \n        .attr(\"offset\", \"0%\")\n        .attr(\"stop-color\", continentsColours['Asia']); \n      //Set the color for the end (100%)\n      linearGradient.append(\"stop\")\n        .attr(\"offset\", \"100%\")\n        .attr(\"stop-color\", continentsColours['Europe']); \n\n      // Set up the start //       \n      const startingXPosition = 250 + margin.left;\n      const startingYPosition = 150 + margin.top;\n      const gNodes = d3.select(gRef.current)\n        .attr(\"transform\", `translate(${startingXPosition}, ${startingYPosition})`)\n\n      /// Timeline axis ///\n      const xAxis = g => g\n        .attr(\"transform\", `translate(${0}, ${height - margin.bottom})`)\n        .call(d3.axisBottom(xScale).tickFormat(i => i).tickSizeOuter(0)) \n        .call(g => g.select(\".domain\")\n          .attr(\"color\", \"#219ebc\")\n          .attr(\"stroke-width\", 8)\n          .attr(\"stroke-linecap\", \"round\")\n        )\n        .call(g => g.selectAll(\".tick\").selectAll(\"line\").remove())\n        .call(g => g.selectAll(\"text\")\n          .attr(\"fill\", \"#219ebc\")\n          .attr(\"font-size\", \"18px\")\n          .attr(\"font-family\", 'Indie Flower, cursive'))\n\n      d3.select(xAxisRef.current).call(xAxis)\n\n\n      ////////////////////////\n      ////  Force Graph  /////\n      ////////////////////////\n      const nodes = gNodes\n        .selectAll(\".node\")\n        .data(data, d => d) \n        .join(\"circle\")\n          .classed(\"node\", true)\n          .attr(\"r\", 5) \n          //.attr(\"fill\", d => continentsColours[d.continent])\n          .attr(\"fill\", d => (\n            countriesMultipleContinents.includes(d.country)\n            ? \"url(#linear-gradient)\"\n            : continentsColours[d.continent]\n          ))\n          .attr(\"fill-opacity\", 0.8)\n          .attr(\"stroke\", d => (\n            countriesMultipleContinents.includes(d.country)\n            ? \"url(#linear-gradient)\"\n            : continentsColours[d.continent]\n          ))\n          .attr(\"stroke-width\", 3)\n          .attr(\"stroke-opacity\", 1)\n\n      function tick() {\n        nodes\n        .attr(\"cx\", d => d.x)\n        .attr(\"cy\", d => d.y);\n      }\n\n      /// define the force ///\n      const simulation = d3.forceSimulation(data)\n        // the .strength() for x and y forces can slow them down and speed them up \n        .force(\"y\", d3.forceY((d, i) => height/1.6 - startingYPosition).strength(0.01))\n        .force(\"x\", d3.forceX((d, i) =>  xScale(+d.first_year) + xScale.bandwidth()/2 - startingXPosition).strength(0.03))\n        .force(\"collide\", d3.forceCollide(10))\n        .alphaDecay(0.001) // this makes the collide force more or less gittery\n        .on(\"tick\", tick)\n        .stop();\n\n      tick();\n\n      ///////////////////\n      /// Play button ///\n      ///////////////////\n      const playButton = d3.select(playButtonRef.current)\n        .on(\"click\", function() {\n          setTimeout(() => {\n            simulation.restart();\n            nodes.transition().attr(\"r\", r => 6);\n          }, 500);\n        })\n\n      ///////////////////\n      ///// Tooltip /////\n      ///////////////////\n      const tooltip = d3.select(tooltipRef.current)\n      nodes\n      .on('mouseenter', (e, datum) => {\n        tooltip \n        .style('transform', d => `translate(\n            ${xScale(+datum.first_year)}px,\n            ${120}px`\n          ) \n        .style(\"opacity\", 1)\n        .text(`${datum.country} ${datum.first_year}`)\n      })\n      .on('mouseleave', () => {\n        tooltip.style(\"opacity\", 0)\n      })\n\n      ///////////////////\n      ///// Legend //////\n      ///////////////////\n      const legendG = d3.select(legendRef.current)\n        .attr(\"transform\", `translate(${0}, ${margin.top})`)\n      \n      const legendScale = d3.scaleBand()\n        .domain(Object.keys(continentsColours))\n        .range([width/2.5, width/1.8])\n\n      // Groups for each circle-continent paid \n      const legendGroups = legendG\n        .selectAll(\".legend-group\")\n        .data(Object.keys(continentsColours))\n        .join(\"g\")\n        .classed(\"legend-group\", true)\n        .attr(\"transform\", d => `translate(${legendScale(d) + legendScale.bandwidth()/2}, ${0})`)\n\n      // Title on top of the legend \n      const legendTitle = legendG\n        .selectAll(\".legend-title\")\n        .data(['each circle = country, coloured by continent; click to filter'])\n        .join(\"text\")\n        .classed(\"legend-text\", true)\n        .text(d => d)\n        .attr(\"transform\", `translate(${width/2.5 - 25}, ${-28})`)\n        .attr(\"dy\", \"0.35em\")\n        .style(\"fill\", \"#219ebc\")\n      \n      // Circles for the legend \n      const legendCircles = legendGroups \n        .selectAll(\".legend-circle\")\n        .data(d => [d])\n        .join(\"circle\")\n        .classed(\"legend-circle\", true)\n          .attr(\"r\", 10)\n          .attr(\"fill\", d => continentsColours[d])\n          .attr(\"fill-opacity\", 0.8)\n          .attr(\"stroke\", d => continentsColours[d])\n          .attr(\"stroke-width\", 3)\n          .attr(\"stroke-opacity\", 1)\n\n\n      // X Axis \n      const legendXAxis = g => g\n        .call(d3.axisBottom(legendScale).tickFormat(\n          i => i == \"missing\" ? \"no longer exists / renamed / other\" : i\n        ))\n        .attr(\"transform\", `translate(${0}, ${45})`)\n        .call(g => g.select(\".domain\").remove())\n        .call(g => g.selectAll(\"text\")\n          .attr(\"transform\", `rotate(-30)`)\n          .attr(\"text-anchor\", \"end\")\n          .style(\"fill\", d => continentsColours[d])\n          .attr(\"font-family\", 'Indie Flower, cursive')\n          .style(\"font-size\", \"1.2em\")\n        )\n        .call(g => g.selectAll(\".tick\")\n          .style(\"color\", d => continentsColours[d])\n        )\n\n      d3.select(legendAxisRef.current).call(legendXAxis)\n\n      // Events on the legend \n      legendCircles\n        .on(\"click\", function(e, datum) {\n          legendCircles\n            .attr(\"fill-opacity\", d => d == datum ? 0.8 : 0.06)\n            .attr(\"stroke-opacity\", d => d == datum ? 1 : 0.1)\n          d3.select(legendAxisRef.current).call(legendXAxis)\n            .call(g => g.selectAll(\".tick\")\n            .style(\"opacity\", d => d == datum ? 1 : 0.06)\n          )\n          nodes\n            .attr(\"fill-opacity\", d => \n            d.continent == datum ? 0.8 : 0.06\n            )\n            .attr(\"stroke-opacity\", d => d.continent == datum ? 1 : 0.1)\n        })\n\n\n        // for the event where we restore the opacity when we click outisde the legend \n        svg\n          .on(\"click\",function(e, datum){\n            // check if the click ocurred on the target or not \n            // if it's \"false\" then the click did not happen on the target \n            console.log(e.target)\n            console.log(this == e.target)\n            if (this == e.target) {\n              legendCircles\n                .attr(\"fill-opacity\", 0.8)\n                .attr(\"stroke-opacity\", 1)\n              d3.select(legendAxisRef.current).call(legendXAxis)\n                .call(g => g.selectAll(\".tick\")\n                .style(\"opacity\", 1)\n              ) \n              nodes\n                .attr(\"fill-opacity\", 0.8)\n                .attr(\"stroke-opacity\", 1)\n            }\n        });\n\n\n      \n\n\n\n    } \n  }, [data]);\n\n  const toggleGraphExplanation = () => {\n    setRevealGraphExplanation(!revealGraphExplanation)\n  }\n\n  return (\n    <div className=\"page-container page-container-first-time\">\n      <h2 className=\"graph-title graph-title-first-time\">When did countries first participate in the Olympics?</h2>\n      <div className=\"mascot-first-time\"></div>\n      <button \n        className=\"graph-explain-icon\" \n        onClick={toggleGraphExplanation}\n      >\n        <FontAwesomeIcon icon={faBookOpen} />\n        <span className=\"info-span\"></span>\n      </button>  \n      {\n        revealGraphExplanation \n        ? <GraphExplain />\n        : null\n      } \n\n      <div className=\"wrapper wrapper-first-time\">\n        <svg ref={svgRef} width={width} height={height}>\n          <g ref={gRef}></g>\n          <g ref={xAxisRef}></g>\n          <g ref={legendRef}></g>\n          <g ref={legendAxisRef}></g>\n        </svg>\n        <div className=\"play-button-first-time\" ref={playButtonRef}>play</div>\n        <div className=\"tooltip-first-time\" ref={tooltipRef}>Tooltip</div>\n      </div>\n\n    </div>\n  )\n};\n\nexport default FirstTimeParticipate;","/Users/user/Code/Projects/olympics/website/src/Components/FemalePies/Pie.js",["80","81","82","83","84","85","86","87"],"import React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./FemalePies.css\";\nimport _ from \"lodash\";\nimport chroma from \"chroma-js\";\nimport rough from 'roughjs/bundled/rough.cjs';\n\n\n\nconst Pie = ({ show, setShow }) => {\n\n  /// refs ///\n  const svgRef = useRef();\n  const gRef = useRef();\n  const revealButtonRef = useRef();\n\n  /// constatns ///\n  // dimensions \n  const height = 400;\n  const width = height;\n  // for the pies \n  const pieSize = 400; \n  const innerRadius = 60;\n  const outerRadius = pieSize/2 - 10;\n  const padAngle = 0.1;\n  const conerRadius = 15;\n  // colours \n  const colourFemale = chroma(\"#ff006e\").saturate(0)\n  const colourMale = chroma(\"#219ebc\").saturate(2)\n\n\n\n  /// D3 Code ///\n  useEffect(() => {\n\n      /////////////////////////////////////////////\n      /////////// Rough JS Define /////////////////\n      /////////////////////////////////////////////\n      let rc = rough.svg(document.getElementById(\"svg-pie\"));\n\n      /////////////////////////////////////////////\n      //////////////// Graph //////////////////////\n      /////////////////////////////////////////////\n      const svgD3 = d3.select(svgRef.current).attr(\"width\", width).attr(\"height\", height);\n      // 1. Pie\n      // this is what you use on the data\n      const pie = d3\n        .pie()\n        .sort(null)\n        .value((d) => d.percentage);\n\n      // 2. Arc\n      // this is what you use when drawing the graph\n      // it becomes the d attribute of paths\n      const arc = d3\n        .arc()\n        .innerRadius(innerRadius)\n        .outerRadius(outerRadius)\n        .padAngle(padAngle)\n        .cornerRadius(conerRadius);\n      // Graph area\n      const g = d3.select(gRef.current)\n        .attr(\"transform\", `translate(${width/2}, ${height/2})`)\n\n      const data = \n      [\n        {gender: \"male\", percentage: 50, year: 0},\n        {gender: \"female\", percentage: 50, year: 0},\n      ]\n\n      // draw the pie chart\n      const pieCharts = g\n        .each(function(d, i) {\n          d3.select(this).node()\n          // draw part for the male \n            .appendChild(\n              rc.path(arc(pie(data)[0]), {\n                stroke: colourMale,\n                strokeWidth: 1,\n                fillStyle: 'cross-hatch',\n                fill: colourMale,\n                roughness: 2.5,\n          }))\n          // draw part for the female \n            .appendChild(\n              rc.path(arc(pie(data)[1]), {\n                stroke: colourFemale,\n                strokeWidth: 0.8,\n                fillStyle: 'zigzag',\n                fill: colourFemale,\n                roughness: 2.2,\n          }))\n        });\n\n      // draw the pie chart again for thicker lines\n      const pieCharts2 = g\n        .each(function(d, i) {\n          d3.select(this).node()\n          // draw part for the male \n            .appendChild(\n              rc.path(arc(pie(data)[0]), {\n                stroke: colourMale,\n                strokeWidth: 1,\n                fillStyle: 'cross-hatch',\n                fill: colourMale,\n                roughness: 2.5,\n          }))\n          // draw part for the female \n            .appendChild(\n              rc.path(arc(pie(data)[1]), {\n                stroke: colourFemale,\n                strokeWidth: 0.8,\n                fillStyle: 'zigzag',\n                fill: colourFemale,\n                roughness: 2.2,\n          }))\n        });\n\n      ////////////////////////////\n      ///////// Button //////////\n      //////////////////////////\n      const revealButton = d3.select(revealButtonRef.current)\n        .attr(\"transform\", `translate(${width/2}, ${height/2})`)\n\n      const revealButtonCircle = revealButton.selectAll(\".button-circle\").data([0]).join(\"circle\")\n        .classed(\"button-circle\", true)\n          .attr(\"r\", 40)\n          .attr(\"fill\", \"white\")\n          .attr(\"stroke\", \"#AB2E64\")\n          .attr(\"stroke-width\", 5)\n\n      const revealButtonText = revealButton.selectAll(\".button-text\").data([\"show\"]).join(\"text\")\n        .classed(\"button-text\", true)\n          .text(d => d)\n          .attr(\"fill\", \"#AB2E64\")\n          .attr(\"dy\", \"0.35em\")\n          .style(\"text-anchor\", \"middle\")\n          .attr(\"font-size\", \"20px\")\n          .attr(\"cursor\", \"default\")\n\n      revealButton.on(\"click\", function(){setShow(true)})\n\n\n  }, [show]);\n\n  return (\n      <div className=\"wrapper\">\n        <svg ref={svgRef} width={width} height={height} id=\"svg-pie\">\n          <g ref={gRef}></g>\n          <g ref={revealButtonRef}></g>\n        </svg>\n      </div>\n  )\n};\n\nexport default Pie;","/Users/user/Code/Projects/olympics/website/src/Components/Paralympics/Paralympics.js",["88","89","90","91","92","93","94","95","96","97"],"/Users/user/Code/Projects/olympics/website/src/Components/FrontPage/FrontPage.js",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":1,"column":16,"nodeType":"104","messageId":"105","endLine":1,"endColumn":24},{"ruleId":"106","severity":1,"message":"107","line":15,"column":23,"nodeType":"108","endLine":15,"endColumn":219},{"ruleId":"102","severity":1,"message":"109","line":119,"column":13,"nodeType":"104","messageId":"105","endLine":119,"endColumn":18},{"ruleId":"102","severity":1,"message":"110","line":155,"column":13,"nodeType":"104","messageId":"105","endLine":155,"endColumn":26},{"ruleId":"102","severity":1,"message":"111","line":164,"column":13,"nodeType":"104","messageId":"105","endLine":164,"endColumn":22},{"ruleId":"112","severity":1,"message":"113","line":168,"column":74,"nodeType":"114","messageId":"115","endLine":168,"endColumn":76},{"ruleId":"116","severity":1,"message":"117","line":197,"column":6,"nodeType":"118","endLine":197,"endColumn":21,"suggestions":"119"},{"ruleId":"102","severity":1,"message":"120","line":6,"column":8,"nodeType":"104","messageId":"105","endLine":6,"endColumn":9},{"ruleId":"102","severity":1,"message":"121","line":11,"column":22,"nodeType":"104","messageId":"105","endLine":11,"endColumn":28},{"ruleId":"102","severity":1,"message":"122","line":11,"column":30,"nodeType":"104","messageId":"105","endLine":11,"endColumn":41},{"ruleId":"106","severity":1,"message":"107","line":16,"column":23,"nodeType":"108","endLine":16,"endColumn":213},{"ruleId":"102","severity":1,"message":"123","line":111,"column":13,"nodeType":"104","messageId":"105","endLine":111,"endColumn":26},{"ruleId":"112","severity":1,"message":"113","line":115,"column":23,"nodeType":"114","messageId":"115","endLine":115,"endColumn":25},{"ruleId":"112","severity":1,"message":"113","line":117,"column":26,"nodeType":"114","messageId":"115","endLine":117,"endColumn":28},{"ruleId":"102","severity":1,"message":"124","line":130,"column":13,"nodeType":"104","messageId":"105","endLine":130,"endColumn":24},{"ruleId":"112","severity":1,"message":"113","line":136,"column":28,"nodeType":"114","messageId":"115","endLine":136,"endColumn":30},{"ruleId":"112","severity":1,"message":"113","line":138,"column":30,"nodeType":"114","messageId":"115","endLine":138,"endColumn":32},{"ruleId":"112","severity":1,"message":"113","line":142,"column":36,"nodeType":"114","messageId":"115","endLine":142,"endColumn":38},{"ruleId":"112","severity":1,"message":"113","line":144,"column":39,"nodeType":"114","messageId":"115","endLine":144,"endColumn":41},{"ruleId":"112","severity":1,"message":"113","line":145,"column":34,"nodeType":"114","messageId":"115","endLine":145,"endColumn":36},{"ruleId":"112","severity":1,"message":"113","line":159,"column":39,"nodeType":"114","messageId":"115","endLine":159,"endColumn":41},{"ruleId":"112","severity":1,"message":"113","line":159,"column":71,"nodeType":"114","messageId":"115","endLine":159,"endColumn":73},{"ruleId":"112","severity":1,"message":"113","line":162,"column":41,"nodeType":"114","messageId":"115","endLine":162,"endColumn":43},{"ruleId":"112","severity":1,"message":"113","line":175,"column":30,"nodeType":"114","messageId":"115","endLine":175,"endColumn":32},{"ruleId":"112","severity":1,"message":"113","line":177,"column":32,"nodeType":"114","messageId":"115","endLine":177,"endColumn":34},{"ruleId":"116","severity":1,"message":"125","line":237,"column":6,"nodeType":"118","endLine":237,"endColumn":12,"suggestions":"126"},{"ruleId":"106","severity":1,"message":"107","line":15,"column":23,"nodeType":"108","endLine":15,"endColumn":137},{"ruleId":"102","severity":1,"message":"127","line":67,"column":13,"nodeType":"104","messageId":"105","endLine":67,"endColumn":23},{"ruleId":"102","severity":1,"message":"128","line":165,"column":13,"nodeType":"104","messageId":"105","endLine":165,"endColumn":23},{"ruleId":"102","severity":1,"message":"129","line":210,"column":13,"nodeType":"104","messageId":"105","endLine":210,"endColumn":24},{"ruleId":"112","severity":1,"message":"113","line":237,"column":18,"nodeType":"114","messageId":"115","endLine":237,"endColumn":20},{"ruleId":"112","severity":1,"message":"113","line":258,"column":42,"nodeType":"114","messageId":"115","endLine":258,"endColumn":44},{"ruleId":"112","severity":1,"message":"113","line":259,"column":44,"nodeType":"114","messageId":"115","endLine":259,"endColumn":46},{"ruleId":"112","severity":1,"message":"113","line":262,"column":38,"nodeType":"114","messageId":"115","endLine":262,"endColumn":40},{"ruleId":"112","severity":1,"message":"113","line":266,"column":25,"nodeType":"114","messageId":"115","endLine":266,"endColumn":27},{"ruleId":"112","severity":1,"message":"113","line":268,"column":54,"nodeType":"114","messageId":"115","endLine":268,"endColumn":56},{"ruleId":"112","severity":1,"message":"113","line":278,"column":30,"nodeType":"114","messageId":"115","endLine":278,"endColumn":32},{"ruleId":"112","severity":1,"message":"113","line":279,"column":22,"nodeType":"114","messageId":"115","endLine":279,"endColumn":24},{"ruleId":"116","severity":1,"message":"130","line":299,"column":6,"nodeType":"118","endLine":299,"endColumn":12,"suggestions":"131"},{"ruleId":"102","severity":1,"message":"103","line":1,"column":17,"nodeType":"104","messageId":"105","endLine":1,"endColumn":25},{"ruleId":"102","severity":1,"message":"120","line":4,"column":8,"nodeType":"104","messageId":"105","endLine":4,"endColumn":9},{"ruleId":"102","severity":1,"message":"109","line":44,"column":13,"nodeType":"104","messageId":"105","endLine":44,"endColumn":18},{"ruleId":"102","severity":1,"message":"111","line":72,"column":13,"nodeType":"104","messageId":"105","endLine":72,"endColumn":22},{"ruleId":"102","severity":1,"message":"132","line":96,"column":13,"nodeType":"104","messageId":"105","endLine":96,"endColumn":23},{"ruleId":"102","severity":1,"message":"133","line":125,"column":13,"nodeType":"104","messageId":"105","endLine":125,"endColumn":31},{"ruleId":"102","severity":1,"message":"134","line":132,"column":13,"nodeType":"104","messageId":"105","endLine":132,"endColumn":29},{"ruleId":"116","severity":1,"message":"135","line":144,"column":6,"nodeType":"118","endLine":144,"endColumn":12,"suggestions":"136"},{"ruleId":"102","severity":1,"message":"137","line":12,"column":10,"nodeType":"104","messageId":"105","endLine":12,"endColumn":32},{"ruleId":"106","severity":1,"message":"107","line":22,"column":9,"nodeType":"108","endLine":22,"endColumn":89},{"ruleId":"106","severity":1,"message":"107","line":24,"column":9,"nodeType":"108","endLine":24,"endColumn":86},{"ruleId":"102","severity":1,"message":"138","line":133,"column":13,"nodeType":"104","messageId":"105","endLine":133,"endColumn":26},{"ruleId":"102","severity":1,"message":"139","line":147,"column":13,"nodeType":"104","messageId":"105","endLine":147,"endColumn":31},{"ruleId":"102","severity":1,"message":"140","line":211,"column":11,"nodeType":"104","messageId":"105","endLine":211,"endColumn":23},{"ruleId":"102","severity":1,"message":"141","line":248,"column":13,"nodeType":"104","messageId":"105","endLine":248,"endColumn":23},{"ruleId":"112","severity":1,"message":"113","line":253,"column":71,"nodeType":"114","messageId":"115","endLine":253,"endColumn":73},{"ruleId":"112","severity":1,"message":"113","line":293,"column":34,"nodeType":"114","messageId":"115","endLine":293,"endColumn":36},{"ruleId":"116","severity":1,"message":"142","line":306,"column":6,"nodeType":"118","endLine":306,"endColumn":45,"suggestions":"143"},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'svgD3' is assigned a value but never used.","'pieChartsText' is assigned a value but never used.","'pieCharts' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'colourFemale', 'colourMale', 'height', 'margin.right', 'margin.top', and 'outerRadius'. Either include them or remove the dependency array.","ArrayExpression",["146"],"'_' is defined but never used.","'faTree' is defined but never used.","'faGrinStars' is defined but never used.","'timelineLines' is assigned a value but never used.","'eventShapes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'margin.left', 'margin.right', 'margin.top', 'negativeColour', and 'positiveColour'. Either include them or remove the dependency array.",["147"],"'continents' is assigned a value but never used.","'playButton' is assigned a value but never used.","'legendTitle' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'margin.bottom', 'margin.left', 'margin.right', and 'margin.top'. Either include them or remove the dependency array.",["148"],"'pieCharts2' is assigned a value but never used.","'revealButtonCircle' is assigned a value but never used.","'revealButtonText' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'colourFemale', 'colourMale', 'outerRadius', 'setShow', and 'width'. Either include them or remove the dependency array. If 'setShow' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["149"],"'annotationCalloutElbow' is defined but never used.","'athletesGraph' is assigned a value but never used.","'athletesGraphRough' is assigned a value but never used.","'myAnnotation' is assigned a value but never used.","'sportsLogo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'margin.left', 'margin.right', and 'margin.top'. Either include them or remove the dependency array.",["150"],"no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},"Update the dependencies array to be: [colourFemale, colourMale, dataAll, height, margin.right, margin.top, outerRadius, show]",{"range":"161","text":"162"},"Update the dependencies array to be: [data, margin.left, margin.right, margin.top, negativeColour, positiveColour]",{"range":"163","text":"164"},"Update the dependencies array to be: [data, margin.bottom, margin.left, margin.right, margin.top]",{"range":"165","text":"166"},"Update the dependencies array to be: [colourFemale, colourMale, outerRadius, setShow, show, width]",{"range":"167","text":"168"},"Update the dependencies array to be: [data, dataSports, margin.left, margin.right, margin.top, sports, sportsLogos]",{"range":"169","text":"170"},[6442,6457],"[colourFemale, colourMale, dataAll, height, margin.right, margin.top, outerRadius, show]",[8083,8089],"[data, margin.left, margin.right, margin.top, negativeColour, positiveColour]",[10215,10221],"[data, margin.bottom, margin.left, margin.right, margin.top]",[4314,4320],"[colourFemale, colourMale, outerRadius, setShow, show, width]",[10656,10695],"[data, dataSports, margin.left, margin.right, margin.top, sports, sportsLogos]"]